<?xml version="1.0" encoding="utf-8"?>
<Document>
  <Engineering version="V16" />
  <DocumentInfo>
    <Created>2022-04-05T11:55:10.7824651Z</Created>
    <ExportSetting>WithDefaults</ExportSetting>
    <InstalledProducts>
      <Product>
        <DisplayName>Totally Integrated Automation Portal</DisplayName>
        <DisplayVersion>V16 Update 3</DisplayVersion>
      </Product>
      <OptionPackage>
        <DisplayName>TIA Portal Version Control Interface</DisplayName>
        <DisplayVersion>V16 Update 2</DisplayVersion>
      </OptionPackage>
      <OptionPackage>
        <DisplayName>TIA Portal Openness</DisplayName>
        <DisplayVersion>V16 Update 3</DisplayVersion>
      </OptionPackage>
      <Product>
        <DisplayName>STEP 7 Professional</DisplayName>
        <DisplayVersion>V16 Update 3</DisplayVersion>
      </Product>
      <OptionPackage>
        <DisplayName>STEP 7 Safety</DisplayName>
        <DisplayVersion>V16</DisplayVersion>
      </OptionPackage>
      <Product>
        <DisplayName>WinCC Professional</DisplayName>
        <DisplayVersion>V16 Update 3</DisplayVersion>
      </Product>
    </InstalledProducts>
  </DocumentInfo>
  <SW.Blocks.FC ID="0">
    <AttributeList>
      <AutoNumber>false</AutoNumber>
      <HeaderAuthor>M_Gledhill</HeaderAuthor>
      <HeaderFamily>Documentation</HeaderFamily>
      <HeaderName>DocGenExample</HeaderName>
      <HeaderVersion>1.1</HeaderVersion>
      <Interface><Sections xmlns="http://www.siemens.com/automation/Openness/SW/Interface/v4">
  <Section Name="Input">
    <Member Name="SYS_SIGNALS" Datatype="&quot;UT21000_Dy_SysSignals&quot;" Accessibility="Public">
      <Comment>
        <MultiLanguageText Lang="en-US">Common system signals — logic and timing signals</MultiLanguageText>
      </Comment>
      <Sections>
        <Section Name="None">
          <Member Name="revInfo" Datatype="&quot;UT01000_St_SysRevision&quot;">
            <Sections>
              <Section Name="None">
                <Member Name="REV_BLOCK" Datatype="String[7]" />
                <Member Name="REV_NUMBER" Datatype="String[20]" />
                <Member Name="REV_DATE" Datatype="String[10]" />
                <Member Name="REV_AUTHOR" Datatype="String[20]" />
              </Section>
            </Sections>
          </Member>
          <Member Name="___________0010_0" Datatype="Bool" />
          <Member Name="___________0010_1" Datatype="Bool" />
          <Member Name="_False" Datatype="Bool" />
          <Member Name="_True" Datatype="Bool" />
          <Member Name="_50ms" Datatype="Bool" />
          <Member Name="_100ms" Datatype="Bool" />
          <Member Name="_200ms" Datatype="Bool" />
          <Member Name="_500ms" Datatype="Bool" />
          <Member Name="_1s" Datatype="Bool" />
          <Member Name="_2s" Datatype="Bool" />
          <Member Name="_CycleTick" Datatype="Bool" />
          <Member Name="_CycleTock" Datatype="Bool" />
          <Member Name="_CycleFirst" Datatype="Bool" />
          <Member Name="_100msSqW" Datatype="Bool" />
          <Member Name="_200msSqW" Datatype="Bool" />
          <Member Name="_500msSqW" Datatype="Bool" />
          <Member Name="_1sSqW" Datatype="Bool" />
          <Member Name="_2sSqW" Datatype="Bool" />
        </Section>
      </Sections>
    </Member>
  </Section>
  <Section Name="Output" />
  <Section Name="InOut" />
  <Section Name="Temp">
    <Member Name="revInfo" Datatype="&quot;UT01000_St_SysRevision&quot;">
      <Comment>
        <MultiLanguageText Lang="en-US">Revision information for this block</MultiLanguageText>
      </Comment>
      <Sections>
        <Section Name="None">
          <Member Name="REV_BLOCK" Datatype="String[7]" />
          <Member Name="REV_NUMBER" Datatype="String[20]" />
          <Member Name="REV_DATE" Datatype="String[10]" />
          <Member Name="REV_AUTHOR" Datatype="String[20]" />
        </Section>
      </Sections>
    </Member>
    <Member Name="licInfo" Datatype="&quot;UT01001_St_SysLicence&quot;">
      <Comment>
        <MultiLanguageText Lang="en-US">Licence information for this block</MultiLanguageText>
      </Comment>
      <Sections>
        <Section Name="None">
          <Member Name="LICENCE_TYPE" Datatype="String[20]" />
          <Member Name="COPYRIGHT" Datatype="String[30]" />
        </Section>
      </Sections>
    </Member>
    <Member Name="wrkInt" Datatype="Int">
      <Comment>
        <MultiLanguageText Lang="en-US">Working storage area (integer)      </MultiLanguageText>
      </Comment>
    </Member>
    <Member Name="wrkDInt" Datatype="DInt">
      <Comment>
        <MultiLanguageText Lang="en-US">Working storage area (double integer)  </MultiLanguageText>
      </Comment>
    </Member>
    <Member Name="wrkReal" Datatype="Real">
      <Comment>
        <MultiLanguageText Lang="en-US">Working storage (real)</MultiLanguageText>
      </Comment>
    </Member>
  </Section>
  <Section Name="Constant">
    <Member Name="k_PI" Datatype="Real" Accessibility="Public">
      <Comment>
        <MultiLanguageText Lang="en-US">Value of Pi (π)</MultiLanguageText>
      </Comment>
      <StartValue>3.141592</StartValue>
    </Member>
    <Member Name="k_2PI" Datatype="Real" Accessibility="Public">
      <Comment>
        <MultiLanguageText Lang="en-US">Value of 2 X Pi (2π)</MultiLanguageText>
      </Comment>
      <StartValue>6.283185</StartValue>
    </Member>
  </Section>
  <Section Name="Return">
    <Member Name="Ret_Val" Datatype="Void" Accessibility="Public" />
  </Section>
</Sections></Interface>
      <IsIECCheckEnabled>true</IsIECCheckEnabled>
      <MemoryLayout>Optimized</MemoryLayout>
      <Name>FC61000_DocGenExample</Name>
      <Number>61000</Number>
      <ProgrammingLanguage>LAD</ProgrammingLanguage>
      <SetENOAutomatically>false</SetENOAutomatically>
      <UDABlockProperties />
      <UDAEnableTagReadback>false</UDAEnableTagReadback>
    </AttributeList>
    <ObjectList>
      <MultilingualText ID="1" CompositionName="Comment">
        <ObjectList>
          <MultilingualTextItem ID="2" CompositionName="Items">
            <AttributeList>
              <Culture>en-US</Culture>
              <Text>
PRACTICAL SERIES AUTOMATION LIBRARY (PAL)   —   COPYRIGHT 2020 – M. GLEDHILL (MIT LICENCE)
                  ———— ◆ ————
FULL ONLINE DOCUMENTATION IS AVAILABLE AT: https://practicalseries.com/2001-pal/index.html</Text>
            </AttributeList>
          </MultilingualTextItem>
        </ObjectList>
      </MultilingualText>
      <SW.Blocks.CompileUnit ID="3" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="4" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="5" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＤＯＣＵＭＥＮＴＡＴＩＯＮ  ▄▄ 


TITLE:    GENERAL — EXAMPLE DOCUMENTATION


▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ 
┌──────────────────────────────────────────┐
│                                          │
│          FC61000 — SOFTWARE MODULE DESIGN SPECIFICATION (SMDS)            │
│                                          │
│      The PDF version of the SMDS for this module is available online here:        │
│              http://psop.uk/pal-smds-fc61000-p              │
│                                          │
│      It is also available as part of the Project User Defined Documentation,      │
│      it can be accessed by selecting this module in the Project Tree          │
│      (on the left) and pressing SHIFT+F1                        │
│                                          │
└─────────────────────────────────────── ʷᴵᴰ⁻ᵇᵈᵈ ┘

FC61000_DocGenExample is a documentation block that contains examples of all the typical 
forms of documentation used within the PAL.

The block is intended to be an easy reference area that allows the various forms of 
documentation to be cut and pasted into new blocks.

All the examples are based on the instructions contained within the Style Guide 
document [Ref. 009], available here: http://psop.uk/pal-sg-p.

The block itself does not do anything (it has no executable code other than that for hardcoding 
the revision and licence information); and should not be called. Its purpose is purely to store 
examples of the documentation and styles used in networks and comment areas within the 
PAL software.

████████████████████████████████████████████
█                                          █
█ Note:   FC61000 should not be present in any final software generated with the PAL.    █
█                                          █
█     It is intended, purely as a development tool that makes the documenting      █
█     of software modules easier.                          █
█                                          █
████████████████████████████████████████████



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
1.     BLOCK TECHNICAL SUMMARY


 ――――――――――――――――――――――――――――――――――――――――――
 NOMENCLATURE &amp; ADDRESSING
 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK TITLE         Example Documentation for use in Comments
 BLOCK FUNCTION GROUP    General
 BLOCK ADDRESS       FC 61000
 BLOCK SYMBOL        FC61000_DocGenExample
 BLOCK USER ID         DocGenExample

 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK TYPE &amp; USAGE
 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK TYPE         Function (FC)
 BLOCK NUMBER        61000
 LANGUAGE           LAD
 OPTIMISED ACCESS     Yes
 PAL USAGE TYPE       Documentation module

 ――――――――――――――――――――――――――――――――――――――――――
 METRICS
 ――――――――――――――――――――――――――――――――――――――――――
 EXECUTION TIME       22.3 μs¹
 LOAD MEMORY       80.4 kB
 WORK MEMORY           0.3 kB  
 ――――――――――――――――――――――――――――――――――――――――――
               ¹ Measured on: CPU-1515-2PN (order no. 6ES7512-2AM02-0AB0) 
                            http://psop.uk/pal-ds-cpu1515



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
1.1      Additional document references


In addition to the documents referenced in OB1 (section DOCUMENT REFERENCES), the 
following documents are associated with this module:


 ――――――――――――――――――――――――――――――――――――――――――
 REF.     DOCUMENT NO.       TITLE
 ――――――――――――――――――――――――――――――――――――――――――
 101  ISO 8601          International Standard for Date and time format
 ――――――――――――――――――――――――――――――――――――――――――

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
2.     FUNCTIONAL DESCRIPTION


FC61000 is the Example Documentation block, it is a documentation module that contains 
examples of all the common block and network comments used throughout the PAL software.

All examples are based upon the Style Guide [Ref. 009], available here:
     http://psop.uk/pal-sg-p

The examples are intended to be a common resource when developing software using the PAL 
software; acting as quick reference points to be used for all the common stylistic arrangements 
used when documenting software within the PAL.

The module is divided into different networks, with the comments for each network explaining 
and giving examples of a particular aspect of comment styles (headings, body text, tables, 
figures &amp;c.).

Additional networks containing a full list of the common characters available to the 
Siemens TIA font (this being the font used within all comment sections) are provided.


CONTENTS (BY NETWORK)

NW 1.    Block description — Sections 1 to 3.2 (this network)
NW 2.    Block description — Sections 3.3 to 3.4
NW 3.    Block description — Sections 3.5 to 10
NW 4.    Current revision and modification history


WORKED EXAMPLES

NW 5.    Example — OB1 NETWORK 1  — Project description
NW 6.    Example — OB1 NETWORK 2  — Project revision and modification history
NW 7.    Example — BLOCK LEVEL       — Block description — Sections 1 to 10
NW 8.    Example — BLOCK LEVEL       — Current revision and modification history


COMMENT STRUCTURE EXAMPLES

NW 9.    Example — Headings, lists and indented text
NW 10.    Example — Body text
NW 11.    Example — Standard Tables
NW 12.    Example — Other tables
NW 13.    Example — Equations
NW 14.    Example — Figures


CHARACTER LISTS

NW 15.    Special characters — Hyphens, whitespace and construction lines
NW 16.    Special characters — Arrows, box and block characters
NW 17.    Special characters — Currency, punctuation and full-width characters
NW 18.    Special characters — Greek, indexing characters and Roman numerals
NW 19.    Special characters — Mathematical operators (including vulgar fractions)
NW 20.    Special characters — Geometrical and ornamental characters
NW 21.    Special characters — Common character widths and additional whitespace characters


TYPICAL NETWORK COMMENTS

NW 22.    Load the system RTC and store in local variable  [typical network comment]
NW 23.    ██ STEP 03340 — DECLARATION (RUNNING)    [sequence network comment]
NW 24.       STEP 03340 — ACTION (INITIALISE)           [sequence network comment]
NW 25.       STEP 03340 — TRANSITION 01                   [sequence network comment]
NW 26.   LICENCE AND CONTACT INFORMATION       [final network]


This documentation module (FC61000) itself does not contain any executable code. With the 
exception of the revision and licence networks, all networks are empty. The block itself does 
nothing, and its execution will have no effect, other than extending the cycle time.

████████████████████████████████████████████
█                                          █
█ Note:   FC61000 should not be present in any final software generated with the PAL.    █
█                                          █
█     It is intended, purely as a development tool that makes the documenting      █
█     of software modules easier.                          █
█                                          █
████████████████████████████████████████████

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
3.     DETAILED BLOCK DESCRIPTION


The purpose of this block is to provide an easy point of reference for the various documentation 
constructs and styles used within the PAL.

The contents of this block are extracts from the Style Guide [Ref. 009], available here:
     http://psop.uk/pal-sg-p

The block itself does not contain any executable code, with the exception of the revision and 
licence networks, all networks are empty. The block itself does nothing, and its execution will 
have no effect, other than extending the cycle time.

The block provides examples of all the common structures and styles used in the Block 
description, Current revision and all network comment areas. The examples are split into 
separate networks (see "Contents by network" above).

All block documentation created using TIA Portal, is stored in the various comment fields 
available to a block (there is a comment field associated with the block title area and each 
network within the block has its own comment field; additionally, each network has its own title 
line as does the block itself).

These comment fields are not particularly sophisticated and cannot be customised; they use a 
fixed font at non-adjustable point size. The font in question is Siemens TIA Portal Basic and it 
uses a fixed-point size of 9 pt. that cannot be changed.

A comment field for any network can hold approximately 65000 characters including spaces and 
line break characters.

This equates to approximately 670 lines of text, and with (a typical) 19.2 words per line, this is in 
the region of 13,000 words per comment field (per network). 



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.1     Conventions and common terminology



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.1.1     Common PAL abbreviations


There are four common types of blocks associated with Siemens Controllers, three 
programmable blocks (functions, function blocks and organisation blocks), and global data 
storage blocks (data blocks). There are also instance data blocks that hold information for 
specific function blocks. Finally, the PAL treats User Data Types as blocks (UDTs are not blocks, 
but the PAL always associates then with a specific block and names them accordingly).

Each of these block types (and the UDTs) is given a two-letter abbreviation that uniquely identifies 
its type within the software:


 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK ABBREVIATION    MEANING
 ――――――――――――――――――――――――――――――――――――――――――
 FB              Function block
 FC              Function
 OB             Organisation block
 DB             Data block
 ID              Instance data block
 UT              User data type
 ――――――――――――――――――――――――――――――――――――――――――
 Table 3.1   Block type abbreviations


All block names (and UDT names) will start with one of these block identifier abbreviations:



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.1.2     Block naming — class, function and description


Within the PAL all blocks (and UDTs) are given a name; that name has a particular structure that 
includes the block identifier (above), the block number (address), a block class, a block function 
attribute and a description formatted as follows:

     ＢＢｎｎｎｎｎ_ＣｃｃＦｆｆｆｆｆＤｄｄｄｄｄｄｄ

Where:
 ――――――――――――――――――――――――――――――――――――――――――
 ITEM       MEANING         DETAILS
 ――――――――――――――――――――――――――――――――――――――――――
 ＢＢ       Block identifier        2 characters (see block abbreviation above)
 ｎｎｎｎｎ    Block number       5 digits (in the range 00000-61000)
 Ｃｃｃ      Block class         3 characters (see block class below) 
 Ｆｆｆｆｆｆ   Block function       5 characters max (see block function below)
 Ｄｄｄｄｄｄｄｄ Block description    Short description of the block
 ――――――――――――――――――――――――――――――――――――――――――
 Table 3.2   Block naming convention



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
Block class


The block class (Ｃｃｃ) is abbreviated as follows:


 ――――――――――――――――――――――――――――――――――――――――――
 ABB.   CLASS           MEANING
 ――――――――――――――――――――――――――――――――――――――――――
 Std     Standard        Standard block 
 App    Application        Application block 
 Int      Interrupt         System triggered (built-in) interrupt block
 Tmt    Template        Template block 
 Doc    Documentation      Documentation block
 Dy_     Dynamic         Data block and UDT only (contains live, dynamic, data)
 St_     Static         Data block and UDT only (contains static data)
 Rc_     Recipe (semi static)    Data block and UDT only (data loaded from a recipe)
 ――――――――――――――――――――――――――――――――――――――――――
 Table 3.3   Block naming — class



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
Block function


The block function (Ｆｆｆｆｆｆ) is abbreviated as follows:


 ――――――――――――――――――――――――――――――――――――――――――
 ABB.   FUNCTION       MEANING
 ――――――――――――――――――――――――――――――――――――――――――
 Sys     System         System block 
 Inst    Instrumentation     Instrument block
 ILock     Interlocks       Interlock, permissive and trip logic
 Safe   Safety        Safety systems
 Calc      Calculations      Calculation and mathematics
 Cont      Continuous       Continuous control logic
 Seq    Sequence       Sequential control logic
 Cmd      Command      Command handling
 Dev    Device drivers     Device drivers
 Msg    Messages       Alarm, warning, event and prompt handling
 Comms   Communications   Communication handling
 Sub    Subroutines      Subroutine functions
 INrm     Normal Interrupts     Normal (non-error) interrupt functions
 IErr     Error Interrupts       Error interrupt functions
 Debug  Debug          Debug functions
 Gen    General        General scope (applies to the whole project)
 ――――――――――――――――――――――――――――――――――――――――――
 Table 3.4   Block naming — function



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
Block description


The block description (Ｄｄｄｄｄｄｄｄ) does not have a prescribed list of naming options; 
it is simply a short form description of what the block does. Examples are:


 ――――――――――――――――――――――――――――――――――――――――――
 ABB.          MEANING
 ――――――――――――――――――――――――――――――――――――――――――
 AnalogRead        Analogue read
 ValveMod         Modulating valve
 DriveVSD          Variable speed drive

 ――――――――――――――――――――――――――――――――――――――――――
 Table 3.5   Block naming — description


Block descriptions are always written without spaces using camel case¹ ; typically, block 
descriptions should be 12 characters or fewer in length.


――――――――――
¹         Camel case is the practice of joining words together and capitalising the start of each 
     word, it is more formal known as medial capitals.
――――――――――



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.1.3     Block naming restrictions


The basic restrictions on naming blocks within the PAL are:

   1. The Class abbreviation is three characters long and starts with a capital letter

   2. The Function abbreviation is no more than five characters long and must start with a 
     capital letter

   3. The Description does not have a restriction on the number of characters but should 
     generally be kept short

   4. Each separate word in the description is capitalised with all other letters in lowercase 
     (this includes the first word)

   5. The overall length of the name (including class, function and description) must be 
     20 characters or less

   6. Only the characters [a-z], [A-Z], the numbers [0-9], the dash/hyphen [-] and the 
     underscore [ _ ] are permitted



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.1.4     General abbreviations and conventions


Abbreviations are always capitalised except where there is an accepted convention or 
manufacturer’s trade mark (such as AS-i).

This document uses the capitalisation of nouns to indicate elements of the control system and 
its associated equipment, for example Control System refers to the control system being 
programmed (rather than a nonspecific control system used as a general reference). 
Similarly, Controller refers to a Siemens S7-1200/1500 controller.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.2     Common settings



TIA Portal is a highly configurable package and its appearance can be drastically changed by 
reconfiguring the package settings.

TIA Portal settings are split into two types: Project specific settings that apply only to the current 
project (this covers languages &amp;c.), and global settings that are configured for the package as 
a whole and that apply to every project that is loaded (things like font size, colours, display 
arrangements &amp;c.).

Some properties within TIA Portal are dependent on the underlying Windows operating system 
settings (specifically date and time formats used within TIA Portal) and to give a common look 
and feel to projects within TIA Portal, these should be changed too.

Finally, the PAL requires certain settings and configurations to be applied to whichever 
processor (CPU) is to be used to run the PAL software.

The content here is a subset of that contained in the ES/WDP Configuration Manual [Ref. 010], 
available here:

     http://psop.uk/pal-es-p



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.2.1     Windows regional settings


TIA Portal is not responsive to the regional settings selected within windows¹. TIA Portal only 
uses the REGION AND LANGUAGE settings for ENGLISH (UNITED STATES). 

Where other regions are used — ENGLISH (UNITED KINGDOM) for example, then TIA Portal will 
ignore this and use the default setting for ENGLISH (UNITED STATES). This tends to mean that 
dates always default to the American format of mm/dd/yyyy, and this is generally not acceptable.

The only way to change this is to set the region and language to ENGLISH (UNITED STATES) and 
then change the defaults to something more English (British) in nature.

With Windows 10/11, the region settings can be accessed by clicking the WINDOWS START button 
and entering region. It will appear at the top of the search list (as region, control panel). Click it 
and then select additional settings.

In the first tab (NUMBERS) change the measurement system to METRIC.

In the second tab (CURRENCY change the currency to £ — just overtype the dollar sign, the 
dropdown does not show the £ sign).

In the TIME tab, select the SHORT and LONG times to have two capital H characters at the start. 
This causes time to be displayed in the 24-hour clock format with leading zeros to make sure 
the hours always occupy two characters (e.g. 01:08 instead of 1:08 AM):

     SHORT TIME:    HH:mm
     LONG TIME:     HH:mm:ss

The date tab must be set to use an unambiguous date format (the dd/mm/yyyy and mm/dd/yyyy 
used respectively by the British and Americans can lead to confusion with days numbered less 
than 13 e.g. 12/01/2019 could be read as 12 January 2019 or 01 December 2019). 

The acceptable formats for dates are either specifying the month with letters (Jan, Feb, 
Mar &amp;c.) or by using the ISO 8601 [Ref. 101] standard date format (this is generally the 
preferred format within engineering projects ).

     SHORT DATE:      yyyy-MM-dd
     LONG DATE:       dd MMM yyyy
     SHORT TIME:    HH:mm
     LONG TIME:     HH:mm:ss


――――――――――
¹         This is an omission on the part of TIA Portal, all Windows programmes should adopt 
     the region settings selected by Windows — it is however consistent with earlier 
     versions of Siemens programming packages: Simatic Manager (Step 7) and PCS 7; 
     both of which ignored the Windows regional settings. 
――――――――――



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.2.2     TIA Portal restoring default settings


To provide a common interface format, the PAL uses the default settings for TIA Portal as much 
as possible. However, there are a few areas where these settings need to be changed to match 
the requirements of the PAL.

To start from a common point, the TIA Portal settings should be restored to their default values. 
This is done under the settings menu: select OPTIONS → SETTINGS. To opens the main settings 
window in the central display area:

Firstly, ensure that the USER INTERFACE LANGUAGE is set to ENGLISH

There are three RESET TO DEFAULT buttons in the second row down. The first button 
ALL APPLICATION SETTINGS restores all the settings within the application and for all the editor 
types back to their default values, it also restores all the editor layouts back to their default 
arrangements and re-activates any messages that may have been suppressed.

The second button EDITOR LAYOUTS just restores the screen arrangements back to their 
default configurations (the first button also does this, but this button does not restore any 
other application settings).

The third button SHOW ALL MESSAGE WINDOWS, resets any pop-up messages that have been 
disabled (by clicking the DO NOT SHOW THIS MESSAGE AGAIN option) so that they will be 
shown once more if the necessary conditions to trigger them occur.

To restore the default settings, click the first button: ALL APPLICATION SETTINGS (this is effectively 
the same as clicking the second and third buttons too since it resets the window layouts and 
any messages that have been suppressed).

TIA Portal must be closed and reopened for the changes to take effect. 
――――――――――



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.2.3     Applying global PAL settings to TIA Portal


Certain changes are needed to make the PAL appear in the correct format within TIA Portal (give 
TIA Portal a common appearance that matches the requirements of the PAL, variable naming 
length &amp;c.), other changes are made to give a more consistent and convenient arrangement 
when using TIA Portal.

To make the changes, again open the settings page: select OPTIONS → SETTINGS.

This opens the main settings dialogue box and defaults to the GENERAL options

The following changes should be made:


 GENERAL
 ――――――――――――――――――――――――――――――――――――――――――
 AREA              OPTION           SETTING
 ――――――――――――――――――――――――――――――――――――――――――
 General settings        User name       By default, this is the username of 
                           the current windows user. If this is 
                           not correct, change it here

 Start view           Most recent         Select project
               Portal
               Project

 View for objects in overview   Details           Select details
               List
               Thumbnail
 ――――――――――――――――――――――――――――――――――――――――――


 PLC PROGRAMMING → LAD/FBD (LADDER/FUNCTION BLOCK DIAGRAM)
 ――――――――――――――――――――――――――――――――――――――――――
 AREA              OPTION           SETTING
 ――――――――――――――――――――――――――――――――――――――――――
 Operand field          Maximum width       Set to 26 characters 
 ――――――――――――――――――――――――――――――――――――――――――


 ONLINE &amp; DIAGNOSTICS → DEFAULT CONNECTION PATH FOR ONLINE ACCESS
 ――――――――――――――――――――――――――――――――――――――――――
 AREA              OPTION           SETTING
 ――――――――――――――――――――――――――――――――――――――――――
 Default connection       Type of PG/PC interface     Select pn/ie 
 path for online access

 Default connection path      PG/PC interface      Select the PC network card being
 for online access                   used to connect to the controller
 ――――――――――――――――――――――――――――――――――――――――――


 VISUALISATION SETTINGS
 ――――――――――――――――――――――――――――――――――――――――――
 AREA              OPTION           SETTING
 ――――――――――――――――――――――――――――――――――――――――――
 Screens           Settings editor      Select snap to grid

 Screens           Grid              Set grid size X &amp; Y to 2

 Screens           Standard screen size    Set to match resolution of target  
               (RT Professional)       monitor

 Resize screen          Size adaptation of      Disable “fit to size” for text objects
                           Disable “fit to size” for graphical 
                           objects
 ――――――――――――――――――――――――――――――――――――――――――



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.2.4     Applying project specific settings to a TIA Portal project


The project language is a project specific setting (i.e. stored within a particular project rather 
than within the global settings for TIA Portal).

If a project is based on a downloaded copy of the PAL then the project language will already have 
the correct settings. If, however, a new project is created and elements of the PAL are copied 
into it then the project language should be reconfigured. If all the previous settings have been 
adopted, the default configuration for a new project will probably be correct; however, the 
correct settings are shown below.

Double click PROJECT LANGUAGES under LANGUAGES AND RESOURCES in the PROJECT TREE to 
open the project language dialogue box in the central area.

Set the EDITING LANGUAGE and REFERENCE LANGUAGE (in the top area) to 
ENGLISH (UNITED STATES)

In the area below, activate the tick box in the central area next to ENGLISH (UNITED STATES) and 
deselect everything else. 



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.2.5     Common CPU Properties


The PAL is not associated with a particular CPU; it will work on any S7-1500/1200 CPU. It does 
however require that certain property settings associated with the selected CPU are activated 
(and some deactivated). Those settings are described below.

In the project tree select DEVICE CONFIGURATION, this opens an image of the Controller rack in 
the central area, right click the CPU and from the dropdown menu select PROPERTIES, this opens 
the PROPERTY SETTINGS window in the centre-bottom area.

As with TIA Portal, the PAL keeps most CPU settings at the default values. The ones that must be 
changes are:


 PROFINET INTERFACE (X1)
 ――――――――――――――――――――――――――――――――――――――――――
 AREA              OPTION           SETTING
 ――――――――――――――――――――――――――――――――――――――――――
 Interface networked with     Click add new subnet   This will change the network to 
                           PN/IE_1

 IP Protocol          Tick Set IP address in    Enter the correct IP address and  
               the project          subnet for the Controller
 ――――――――――――――――――――――――――――――――――――――――――

 SYSTEM AND CLOCK MEMORY
 ――――――――――――――――――――――――――――――――――――――――――
 AREA              OPTION           SETTING
 ――――――――――――――――――――――――――――――――――――――――――
 System memory bits       Enable the use of system  This is unticked by default and it is 
               memory byte         important that it remains unticked

 Clock memory bits        Enable the use of clock   Ensure this box is ticked
               memory byte

 Clock memory bits        Address of the clock      Set to the value 10 
               memory byte (MBx)
 ――――――――――――――――――――――――――――――――――――――――――


 PROTECTION AND SECURITY
 ――――――――――――――――――――――――――――――――――――――――――
 AREA              OPTION           SETTING
 ――――――――――――――――――――――――――――――――――――――――――
 Connection mechanisms     Permit access with     Ensure this box is ticked
               PUT/GET communications
 ――――――――――――――――――――――――――――――――――――――――――
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="6" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="7" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Block description — Sections 1 to 3.2 </Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="8" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="9" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="A" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.3     Common headers and networks



Each programmable block within the PAL (FB, FC or OB) has several common areas at the start 
of the block:

   1. Block title and comment field
     This holds a plain English title for the block and a generic copyright message along 
     with links to the PAL documentation

   2. Network 1 — Detailed description of the block
     This contains a full and detailed functional description of the block including its 
     parameters and data structures

   3. Network 2 — Current revision and modification history
     This holds a full list of modification made to the block along with the revision 
     number, data and the author of the revision

   4. Last Network — Licence
     This holds the licence under which the software is released

These networks are a standard requirement of all blocks within the PAL; all blocks must 
contain these elements and be in accordance with the requirements discussed in the following 
sections.

Taking each of these elements in turn:



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.3.1     Block title and comment field


The first item in any programmable block (FB, FC or OB) is the block title field with a comment 
area underneath.

The block title line contains the block title in the form:

     Class module [FUNCTION] — Description

For example, the block title for the isolating valve module (FC11001) is:

     Standard module [DEVICE DRIVER] — Isolating Valve

Generally, the block title should be no more than 80 characters (including spaces) and should 
be in title case (i.e. all principle words are capitalised), with the function field in capitals.

The block title comment field contains a standard copyright message for the PAL, details of 
how to access the specific User Documentation for the block and a link to the full PAL 
documentation It is shown below:

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

PRACTICAL SERIES AUTOMATION LIBRARY (PAL)   —   COPYRIGHT 2020 – M. GLEDHILL (MIT LICENCE)
                  ———— ◆ ————
FULL ONLINE DOCUMENTATION IS AVAILABLE AT: https://practicalseries.com/2001-pal/index.html

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

The block title comment field is common to all blocks that are issued with the PAL.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.3.2     Network 1 — Block description


The first network in the block (always numbered Network 1) immediately follows the block title 
and comment field. The network itself is not used; it is just an empty network. Its importance is 
purely as a comment field containing a description of the block. 

Network 1 is always given the title Block description. The main function of Network 1 is to hold a 
full description of what the block does, how it does it and the parameters and data structures 
used within the block. The block description should contain the following sections:

       Title
       Overview
   1. Block technical summary
   2. Functional description
   3. Detailed block description
   4. Supervisory system interface
   5. Parameters 
   6. Data structures and usage [and instance DBs]
   7. Constants and Temporary (local) data
   8. Block calls and associations
   9. Example usage
    10. Test and verification path

Each of these areas has its own section in the block description.

The typographical styles used to specify titles, headings, subheadings and area dividers are 
discussed further in § 3.6.

The contents of the block description are based upon the software module design specification 
(SMDS) [Ref. 008] for the module in question.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Title

The title simply gives the full function name followed by the full description of the module (title); 
these are separated by an em-dash.

The class of the module is specified in full width characters at the right-hand side of the top title 
line and is followed by two bottom half block characters (▄), Unicode character 2584h.

The bottom line of the title consists of a row of 44 top half block characters (▀), Unicode 
character 2580h.

It has the following appearance:

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＳＴＡＮＤＡＲＤ  ▄▄


TITLE:    SUBROUTINE — EVENT TIMER RTC


▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

Underneath the title is a link to the PDF version of the Software Module Design Specification for 
the module in question, it has the form:

┌──────────────────────────────────────────┐
│                                          │
│          FC18151 — SOFTWARE MODULE DESIGN SPECIFICATION (SMDS)            │
│                                          │
│      The PDF version of the SMDS for this module is available online here:        │
│              http://psop.uk/pal-smds-fc18151-p              │
│                                          │
│      It is also available as part of the Project User Defined Documentation,      │
│      it can be accessed by selecting this module in the Project Tree          │
│      (on the left) and pressing SHIFT+F1                        │
│                                          │
└─────────────────────────────────────── ʷᴵᴰ⁻ᵇᶜᴰ ┘
The link is a shortened URL (this is generated by the PSP alternative website http://psop.uk). 
These shortened URLs have the same form for each SMDS: 

     http://psop.uk/pal-smds-fcnnnnn-p

Where nnnnn is the block number (61000 in this case), the p at the end indicates it is the pdf 
version of the document, a d would be the Word document (.docx).

The wID code (in small letters) is a web index number that is used for administering the website 
that is associated with the PAL; it is an organisational reference to the associated document 
within the website and it can be ignored for all practical purposes.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Overview

The overview is the same as the abstract section of the software module design specification 
(SMDS) [Ref. 008] for the module in question.

The overview provides a concise summary or overview of the block and its functions. It serves as 
an introduction to the block and provides a synopsis of the block: what it does and why it does it.

The overview should be:
   •   presented as an article that can stand on its own
   •   written in plain English with limited use of abbreviations and engineering jargon 
   •   be short, three or four paragraphs at most
   •   written in a formal tone, avoiding the use of first-person pronouns 
 
The overview should conform to these guidelines:
   •   clearly state the purpose of the block
   •   quickly summarise the functions of the block
   •   avoid introducing information that is not addressed in the following sections

When writing the overview, ensure that:
   1. the message is clear
   2. it includes the key points and functions
   3. the message is unambiguous (i.e. a reader reading the overview could not miss the 
       main point of the block)

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 1 — Block technical summary

The technical summary contains both the detailed technical summary (below) and a list of any 
additional document references that are not included in the general list of OB1 (see § 3.4.1).

The technical summary contains the following specific information about the block:

   1. Nomenclature and addressing
        •   Block title
        •   Functional group
        •   Address
        •   Symbolic name
   2. Block type and usage
        •   Type of block (FC, FB, OB)
        •   Block number
        •   Programming language (LAD, STL &amp;c.)
        •   Optimise access status
        •   PAL type (standard, application, template &amp;c.)

   3. Metrics
        •   Execution time of the block (in microseconds)
        •   Load memory size (in kilobytes)
        •   Work memory size (in kilobytes)

The work memory is the size of the executable software (without comments &amp;c.), the load 
memory is the size of the block (with all comments) stored on the CPU memory card.



Section 1.1 — Additional document references

Any additional documents (calculation sheets, drawings &amp;c.) that are not listed in the Document 
Reference section of OB1 are listed here, the references should start at 101 to distinguish them 
from those in OB1 (which start at 001). See below:

[Additional document reference]
In addition to the documents referenced in OB1 (section DOCUMENT REFERENCES), the 
following documents are associated with this module:


 ――――――――――――――――――――――――――――――――――――――――――
 REF.     DOCUMENT NO.       TITLE
 ――――――――――――――――――――――――――――――――――――――――――
 101  PS2001-5-2331-001-01   FC19512 Calculation Sheet
 ――――――――――――――――――――――――――――――――――――――――――

[Alternate text, use if there are no additional references]
Only those documents specified in OB1 (section DOCUMENT REFERENCES) are listed within this 
block. There are no additional document references.
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 2 — Functional description

The functional description is a detailed examination of what the block does and how it works. It 
may include diagrams and supporting tables if required (the use of diagrams and tables is 
encouraged).

The functional description should be written in plain English with limited use of abbreviations and 
engineering jargon, it should clearly define the purpose of the block and the mechanisms use to 
achieve those purposes.

The functional description can (and usually does) contain subsection and inline sections 
identifying and explaining each aspect of the block.

The functional description should:
   •   Describes precisely the operations performed by the block
   •   Identify and explain each operating mode
   •   Describe any operator interfaces (controls from an HMI or SCADA)
   •   Explain any interfaces to other blocks or systems
   •   Clarify any design assumptions and limitations
   •   Identify all error and failure modes
   •   List all calculations made by the block

The functional description should be sufficiently detailed, such that a technically competent 
individual would understands the precise functions of the block.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 3 — Detailed block description

The detailed block description provides the technical detail needed to fully understand the block 
at an engineering level, using technical terminology common to both the programming of PLCs 
in general and Simatic Controllers in particular; where such terminology is used within the 
accepted engineering conventions and customs of this field, it is done so without further 
explanation. 

The detailed block description expands the information given in the functional description section, 
it explains how the parametric information passed to the block is used to control and achieve the 
requirements of the module. It explains in detail any calculations that are performed by the block. 
It explains the function of each constant and variable passed to the modules as static and 
dynamic data, its purpose and how it should be interpreted by the module software.

The detailed block description describes any supervisory system interfaces and the signals 
passed to and from such systems. Such interfaces control the symbolic representation of the 
device on a mimic screen, drive any block icon and allow opera-tor interfaces via supervisory 
system faceplates.

The detailed block description should as a minimum provide:

   •   An explanation of all formal parameters and their use

   •   Details of all temporary (local) data employed by the block and how this data is used

   •   An explanation of all data passed to and from the block, this should include details 
     of all variables and constants used with-in the block

   •   Permitted ranges of all signals

   •   Interpretation of encoded data (i.e. where the value of a varia-ble can indicate some 
     specific mode or operation, what those values are and what meaning is applied)

   •   Explanations of all operating modes and how they are selected

   •   Details of all timed events (including ranges and resolutions)

   •   Details of all alarms, warnings and events generated by the block and the 
     circumstances under which they are generated

   •   Precises details of all calculations performed by the block. This should also include 
     any temporary or partial calculations used by the block and stored in the temporary 
     (local) data area of the block

   •   Detailed explanations of any algorithms or iterative processes employed by the 
     block

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 4 — Supervisory system interface

Gives a full and detailed explanation of the supervisory system interface. This includes 
the following:
   •   Examples of any symbols used
   •   Examples of any block icons used
   •   Examples of any faceplates used
   •   Precise details of the signals used to animate the graphical ob-jects
   •   Precise details of the signals that can be operated (changed) via the interface

Given the limitations of the block comment fields it may not be practical to reproduce the graphical 
elements of the supervisory system interface, in which case, the user should be referred to the 
SMDS [Ref. 011] by using the following text:

See the online documentation for this block — select the block in the project tree and press:
     SHIFT + F1 or follow the link: http://psop.uk/pal-smds-fcnnnnn-p 

An explanation of the block icons and faceplates available to the supervisory system for this 
module is given in section 4 of the SMDS document [Ref. 011].

A downloadable copy of the SMDS (and all other project documentation) is available here:

     https://practicalseries.com/2001-pal/21-project/01-00-docs.html

For this module, the document number is: PS2001-5-2312-fcnnnnn

[Where nnnnn is the block number in question]

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 5 — Parameters

This section contains a list in tabular form of all the formal parameters associated with the block. 
The table includes the following:

   •   Parameter — the name of the parameter

   •   Function — A summary explanation of what the parameter does: its purpose, and 
     any specific states and requirements

   •   Type — the data type of the parameter (real, int, Bool &amp;c.). or, if used, the number 
     of a UDT

   •   In-Out — Identifies the nature of the parameter interface:
     In: (read only)	Out: (write only)	InOut: (read/write) 

This section must be included even if the block has no parameters, under these circumstances 
the following text is used:

     This block has no formal parameters

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 6 — Data structures and usage (and instance data blocks)

This section contains a list in tabular form of any UDTs that are used by the block. 

Where such structures are used, each element of the structure that is used within the block must 
be identified and an explanation given of how the block uses or modifies the data. To avoid 
duplication, this section may reference the data structure content table in some other block; 
however, if the block uses the data in a way that is not covered elsewhere a full description must 
be given. Again, this data is given in tabulated form.

The section must be included even if the block has no associated UDTs; under these 
circumstances the following text is used:

     There are no data structures associated with this block.

If the block is a function block (FB), it will have an associated instance data block. Under these 
circumstances a full description of the structures and elements within the instance data block 
must be given (generally, this will be the static elements of the DB; all other aspects will be 
duplicates of section 5 (Parameters) and section 7 (Constants &amp; Temporary (local) data), these 
will be created automatically when the DB is initialised).

For functions (FCs) the “(and instance data blocks)” can be removed from the section heading.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 7 — Constants and temporary (local) data

This section contains a list any constants and temporary (local) data used by the block.  

Where such data is used, each constant and variable must be identified and an explanation of 
how the block uses that data given.

The section must be included even if the block has no associated constants or temporary (local) 
data, under this circumstance the following text is used.

The section broken down into the following subsections:



Section 7.1 — Constants

Lists in tabular form all constants used by the block. If there are no constants, the following 
text is used:

     No constants are used in this block.



Section 7.2 — Temporary (local) data

Lists in tabular form all temporary (local) data used by the block. If there are no temporary 
variables, the following text is used:

     No temporary (local) data is used in this block

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 8 — Block calls and associations

This section details any blocks which may be called from within this software module (subroutine 
functions for example), any partner blocks with which it may be associated (for example a receive 
module that is partner with a transmit module &amp;c.). It lists any system functions which may be 
called (e.g. reading the real time clock) and any system data types that may be used.

Finally, it lists any special calling requirements for the block (for example, must be called from 
within a cyclic interrupt organisation block) and if the block is using “optimised access” (this is 
the default arrangement).

It is broken down into the following subsections:



Section 8.1 — Block calls from within this module

This section contains a list of all the non-system block that are called from within the block (these 
are other PAL blocks or third-party blocks for specific equipment). The list is presented in 
tabular form.

The list identifies the block number, gives its title and explains how it is to be used.

The section must be included even if the block has no calls to other blocks; if this is the case, 
the following text is used:

     There are no PAL block calls from within this block.



Section 8.2 — Blocks associated with this module 

If the block is associated with other blocks, i.e. it is part of a set of blocks that together form a 
particular function (an example of this would be a transmit communication block that had a 
counterpart receive block, both being required for data to be passed between controllers); 
then the associated blocks must be listed here.

The list is presented in tabular form.

The list identifies the block number, gives its title and explains how it is to be used in 
conjunction with the block being described.

The section must be included even if the block is not associated with any other blocks; 
if this is the case, the following text is used:

     This is a stand-alone block and is not associated with any other blocks.



Section 8.3 — System block calls and system data types

This section contains a list of all the system blocks and extended instructions that are called 
from within the block (these are either built into the Controller or made available via TIA Portal). 
The list is presented in tabular form.

(The list identifies the block name (and if specified its number), gives its title and explains how 
it is to be used.

Some system blocks and extended instructions used preconfigured data structures referred to a 
system data types (SDTs), where such structures are used a list of the structures must be given 
along with an explanation of how the data elements are used.

The section must be included even if the block has no calls to system blocks or extended 
instructions; under these circumstances, the following text is used:

     There are no system block calls.



Section 8.4 — Special properties and requirements

This section specifies any specific requirements for calling and using the block, this is usually 
split into two subsections:

Section 8.4.1 — Block optimisation, IEC compatibility and library conformance
         Does the block use Optimised Block Access (all blocks should generally be 
         optimised, if not explain why)?

         Has the block been checked for IEC compatibility and is it compliant?

         If the block is a standard module, it must be compatible with all IEC 
         library-conformance module constraints


Section 8.4.2 — Calling requirements
         Is the block time dependant (i.e. is it called from a timed interrupt) or can the 
         block be called as part of the main (OB 1) cycle?

If block optimisation is used, section 8.4.1 should have the following standard text:

     This block is configured with Block Optimised Access (default arrangement).

Where there are no special calling requirements, Section 8.4.2 should have the following 
standard text:

     This are no special calling requirements for this block.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 9 — Example usage

This section contains a typical example of how the block is used and called. It should show the 
block call and typical data block arrangements needed by the block.

Where a block has multiple types of usage, additional examples can be included.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Section 10 —Test and verification path

This section shows all the software module tests and verification activities that have taken place 
to achieve the current release of the module, it has the following appearance:
 
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 
         FCXXXXX-T001         FCXXXXX-T002

     Test version: 000.801      Test version: 001.801
  Released version: 001.000   Released version: 002.000
 Released commit: D0002  Released commit: D0003

 _________________┌┐_______________________┌┐____
           └┘             └┘  
 Initial test    SMT    Comment update   SCV

 Initial test to release the    Comments updated &amp; 
 module following the      minor typographical 
 development stage.     corrections  
 Full SMTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.3.3     Network 2 — Current revision and modification history


The first network after the block description (usually Network 2, this varies if the block description 
requires multiple networks) contains the current revision of the soft-ware module. This network 
is not empty; it contains the current revision number of the block, the revision date and the 
author’s name. These are hard coded in the network.

This network always has the title: Current revision and modification history. The network 
comment field contains the modification history of the block (up to and including the current 
revision). 

A fully worked example is given in network 8 of this module.
 
All blocks within the PAL have the block revision number stored in Network 2. Each field of the 
revision data is stored as a string, the four revision fields are:

   1.  Block number (e.g. FC02001)
   2.  Revision number of the block
   3.  Revision date in the format YYYY-MM-DD
   4.  Author of the revision, initials and surname



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.3.4     Revision numbering mechanism (summary)


The revision numbering mechanism is detailed in the Software Control Mechanism 
(SCM) [Ref. 013], available here:

     http://psop.uk/pal-scm-p

A summary of the pertinent points is given below:

All software blocks are version controlled and each block receives various different revision 
numbers throughout the development, test and deployment stages of the project. The block 
revision number is in the form:

     nnn.amm

The numbering of the revision nnn.amm is an incremental numbering system. In this 
system nnn reflects the current version of the software; typically, the first properly released 
software will be 001. Previous development versions will be 000.

The numbers after the decimal point (amm) reflect development and test modification to the 
current revision (for software modifications), in this system a reflects the current status of the 
software as follows:

 ――――――――――――――――――――――――――――――――――――――――――
 FIRST DIGIT (a)  MEANING      DESCRIPTION	
 ――――――――――――――――――――――――――――――――――――――――――
   0        Released      Code is released at version nnn (i.e. nnn.000)
          mm will be 00

    1-7      Development    Code is under development and has not been 
                     tested

   8        Proving         Proving (test) revisions of the software	

   9        Qualification      Software is deployed to site and is being 
                     commissioned or qualified	
 ――――――――――――――――――――――――――――――――――――――――――
 Table 3.8   Software revision number (first digit)

The remaining numbers (mm), are incremental build numbers for the current revision (this 
allows development tracking).

Note:    A release version of the software will have revision 001.000, 002.000, 003.000 &amp;c. 
     I.e. the numbers after the decimal point are all zero. The first development of the 
     software at release 003 would have revision 003.101.



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.3.5     Last network 2 — Licence
The final network of any block contains a copy of the MIT Licence under which the software is 
made available and contact information:
 
Network 26, the last network of this module contains the licence used for all PAL software.


The name of the licence and the copyright information is hard coded and stored in the 
temporary (local) data area of the block in the variable licInfo.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.4     OB 1 header and revision network


OB 1 (the main organisation block) is considered a special organisation block in terms of the 
Practical Series Automation Library (and in terms of most Siemens Controller software). It is the 
block that generally, executes all the rest of the controller software.

As such it contains information about the whole project rather than just a software module. 
The revision data is also project specific (not module specific).



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.4.1     OB 1 Network 1 — Project description


The OB 1 block description contains a summary of the project, rather than of a particular module, 
as well as copyright, licence, file and project details &amp;c. as follows:

   •   Copyright details
   •   Customer details
   •   Project name
   •   Project number
   •   Controller type (e.g. CPU-1515-2PN)
   •   Controller name (The CPU name assigned in TIA Portal)
   •   IP (Ethernet) address
   •   TIA project name
   •   Software status (e.g. Development, Release &amp;c.)
   •   Project overview (a summary of the project and its purpose)
   •   Document references
   •   Completed modules (list of)
   •   Licence (details of any software licence)

Network 5 of this module gives a typical example of the OB1 project description network.



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.4.2     OB 1 Network 2 — Project revision and modification history


OB 1 Network 2 contains the current revision of the whole software project (rather than of a 
particular block). The whole project is issued at a particular release and this is independent of 
individual module revisions — most modules do not change their revision when the project as 
a whole is reissued at a new release, the new release may be to include new blocks or it may 
be to include a change or correction to a particular block (in which case the revision of the 
affected block would change, but not the others).

Network 2 in OB 1 has the title: Project revision and modification history (rather than "current 
revision"). The network comment field contains the modification history of the software project 
as a whole (up to and including the current revision). 

OB 1 stores more revision information than is done with the general software block revision data 
and it stores it in a data block.

In all other blocks, the revision, the revision date and author’s initials are hard coded as 
statements that simply transfer the data to a temporary area within the block.

In OB 1 the data is loaded in the same way, but this time it is transferred to the system data 
block (DB21001_Dy_SysGlobalData). This allows the data to be read elsewhere within the 
software or by an external device (such as a SCADA or HMI system). In short, OB 1 makes the 
current revision of the project available to anything that has access to the controller.

In the case of OB 1 revision data, the block number is replaced with the project number. 

Network 6 gives a fully worked example of the project current revision and modification history.



</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="B" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="C" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Block description — Sections 3.3 to 3.4</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="D" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="E" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="F" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.5     Examples


Several complete examples are contained in FC61000, these are stored in separate networks 
as follows:


WORKED EXAMPLES

NW 5.    Example — OB1 NETWORK 1  — Project description
NW 6.    Example — OB1 NETWORK 2  — Project revision and modification history
NW 7.    Example — BLOCK LEVEL       — Block description — Sections 1 to 10
NW 8.    Example — BLOCK LEVEL       — Current revision and modification history


Examining these in turn:

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 5 — OB1 Network 1 (Project description)

This is an example of the Project description network (always Network 1) in OB1, it is specific to 
the PAL software and contains all the features discussed in § 3.4.1.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 6 — OB1 Network 2 (Project revision and modification history)

This is an example of the Project revision and modification history network (always 
Network 2) in OB1, it is specific to the PAL software and contains all the features discussed 
in § 3.4.2.

The example shows the various types of revision: primary commit revisions and secondary 
commit revisions see [Ref. 013] for details.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 7 — Block level (Block description)

This is a full, worked example of a block description (in this case for the subroutine FC18151, 
Event Timer RTC), it contains all the common features required of a comprehensive block 
description, see § 3.3.2 and is a suitable example for such, containing diagrams, tables, and 
detailed descriptions in a concise form.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 8 — Block level (Current revision and modification history)

This is an example of the block Current revision and modification history network (the first coded 
network in a module, often, but not necessarily, network 2), it contains the full revision table 
specified in § 3.3.3



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.6     Common comment structure examples


The PAL uses a precise set of structures within comment fields (for headings, lists, footnotes &amp;c.), 
these are all specified in the Style Guide [Ref. 009].

Networks 9 to 14 contain various examples of these structures that can be copied and used in 
other software modules. These are broken down as follows:

COMMENT STRUCTURE EXAMPLES

NW 9.    Example — Headings, lists and indented text
NW 10.    Example — Body text
NW 11.    Example — Standard Tables
NW 12.    Example — Other tables
NW 13.    Example — Equations
NW 14.    Example — Figures


Examining these in turn:

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 9 — Titles, headings, lists and indented text

Contains the following:
   •   a block header
   •   block description titles (all formats)
   •   a full list of all title sections (for each different class of software module)
   •   Examples of all headings (main section, sub-section and inline) with various 
     numbering arrangements (single and double figure)
   •   Various forms of numbered and un-numbered (indented) lists
   •   Examples of notes and footnotes

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 10 — Body text

Explains the body text (the main content of the comment sections), showing alignments and the 
use of various font characteristics.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 11 — Standard tables

Gives populated examples of the standard tables used within a block description:
   •   Parameter table
   •   Data structure list table
   •   Data structure contents (and instance DBs) table
   •   Constant data table
   •   Temporary (local) data table
   •   Block list table
   •   System block list table

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 12 — Other tables

Gives populated examples of various other forms of table that may be of use:
   •   Two column table
   •   Three column table
   •   Four column table
   •   Table with heading

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 13 — Equations

Shows how to structure equations in various forms and lists the common mathematical symbols

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 14 — Figures

Shows examples of various styles of figures and diagrams including:
   •   Full page width figures
   •   Inline figures
   •   Timing diagrams
   •   Complex figures generated using Braille characters



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.7     Special characters


The TIA Portal font is a large font containing multiple linguistic characteristics (Cyrillic, Hebrew &amp;c.),
none of which are covered by the PAL (they are not specifically excluded from the PAL, but the PAL 
is written in English, more precisely British English  — apologies to any Americans reading this, 
you’ll get used to the spellings — and consequently other linguistic character sets are not used 
by default).

The TIA Portal font, does however, support various graphical characters that are useful (box 
forming characters, arrows, various whitespace characters &amp;c.). These characters are not always 
easy to access from within a comment field (TIA Portal has very limited support for using the 
ALT key and code entry mechanism), consequently, networks 15 to 21 are used to store list of the 
more common and useful characters:

CHARACTER LISTS

NW 15.    Special characters — Hyphens, whitespace and construction lines
NW 16.    Special characters — Arrows, box and block characters
NW 17.    Special characters — Currency, punctuation and full-width characters
NW 18.    Special characters — Greek, indexing characters and Roman numerals
NW 19.    Special characters — Mathematical operators (including vulgar fractions)
NW 20.    Special characters — Geometrical and ornamental characters
NW 21.    Special characters — Common character widths and additional whitespace characters

Examining these in turn:

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 15 — Hyphens, whitespace and construction lines

Contains the following:
   •   a full list of all whitespace characters of all available widths
   •   a full list of the various types of hyphens and dashes
   •   various heading construction lines
   •   flourishes and end lines

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 16 — Arrows and box characters

Contains the following:
   •   a wide selection of arrow types in all orientations
   •   box construction characters
   •   various block characters

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 17 — Currency, punctuation and full-width and small characters

Contains the following:
   •   a selection of common currency symbols
   •   an expanded range of punctuation characters
   •   upper and lower case full-width (EM width) characters
   •   upper and lower case small form (essentially superscript) characters

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 18 — Greek, indexing characters and roman numerals

Contains the following:
   •   upper and lower case Greek characters
   •   indexing characters (circled, braced and small)
   •   roman numerals (upper and lower case)

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 19 — Mathematical operator (including vulgar fractions)

The standard selection of mathematical characters and symbols. It also includes a range of 
common vulgar fractions that can be used in the body text.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 20 — Geometrical and ornamental characters

A selection of geometrical symbols and ornamental characters (Wingding type characters).

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 21 — Common character widths and additional whitespace characters

Lists the width of all upper and lower case characters and all numbers and common punctuation 
marks in terms of the normal space character.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.8     Coded network comment examples


Each coded network within a software module must also be commented, there are typical 
arrangements for these comments, these are broadly split into normal (non-sequential) 
networks and sequential networks. The following examples are given:

TYPICAL NETWORK COMMENTS

NW 22.    Load the system RTC and store in local variable  [typical network comment]
NW 23.    ██ STEP 03340 — DECLARATION (RUNNING)    [sequence network comment]
NW 24.       STEP 03340 — ACTION (INITIALISE)           [sequence network comment]
NW 25.       STEP 03340 — TRANSITION 01                   [sequence network comment]

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 22 — A typical coded network comment

Shows the structural arrangements for a typical (non-sequential) coded network. It contains a 
worked example.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 23 — A sequence network comment (step declaration)

Shows a sequence step declaration network, including the dot-matrix numbering arrangements.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 24 — A sequence network comment (step action)

Shows the action format for a sequence step, typical arrangement with the common structures 
used for sequential networks.

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
NW 25 — A sequence network comment (step transition)

Shows format for a step transition network, where the sequence moves from one step to another.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.9     Licence


The final network of the block contains the standard MIT Licence for the block, this block contains 
the standard code used to store the Licence copyright and date information.

NW 26.   LICENCE AND CONTACT INFORMATION       [final network]

This final network is used in all blocks within the PAL.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.10   Block properties


All blocks (FC, FB, OB, DB, iDB and UT) have block properties that can be accessed by right clicking 
the block in the project tree. The nature of the properties are dependent on the block in question.
 
The properties for the common types of blocks within the PAL are listed below along with the form
at and conventions that are applied (only those properties that can be changed by the user are 
listed):


▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.10.1   BLOCK PROPERTIES FOR FC, FB AND OB


 PROPERTY      FORMAT                 EXAMPLE
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: General
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 PROPERTY      FORMAT                 EXAMPLE
 Name      Block name                FC11000_StdDevValveIsol
 Language     The language the block is written in      LAD
 Number     Block number (manually specified)    11000
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: Information
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Title       Block title in the form:            Standard Module [DEVICE DRIVER] — Isolating Valve
         Class module [FUNCTION] — Description
 Comment     Copyright message from block header    See block header § 3.3.1
 Version      For a revision in the form nnn.amm,     00.8
         it shows nn.a
 Family        Block function group (without spaces)     DeviceDriver
 Author        The block author, initial and surname   M_Gledhill
         use underscore in place of spaces
 User-defined ID    The block ID               StdDevValveIsol
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: Attributes
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 IEC Check     Should be active             Box is ticked
 Optimized block   Should be active             Box is ticked
 access 
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Note:   For all Standard Modules, the entry LIBRARY CONFORMANCE (in the COMPILATION area) must read: 
     "The object is library-conformant"


▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.10.2   BLOCK PROPERTIES FOR STATIC DBs


 PROPERTY      FORMAT                 EXAMPLE
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: General
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Name      Block name                DB11001_St_DevValveIsol
 Language     The language the block is written in      DB
 Number     Block number (manually specified)    11000
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: Information
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Title       Block title in the form:            Static DB [DEVICE DRIVER] — Isolating Valve
         Static DB module [FUNCTION] — Description
 Comment     Copyright message from block header    See block header § 3.3.1
 Version      For a revision in the form nnn.amm,     00.8
         it shows nn.a
 Family        Block function group (without spaces)     DeviceDriver
 Author        The block author, initial and surname   M_Gledhill
         use underscore in place of spaces
 User-defined ID    The block ID               St_DevValveIsol
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: Attributes
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Optimized block   Should be active             Box is ticked
 access 
 ――――――――――――――――――――――――――――――――――――――――――――――――――



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.10.3   BLOCK PROPERTIES FOR DYNAMIC DBs


 PROPERTY      FORMAT                 EXAMPLE
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: General
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Name      Block name                DB31001_Dy_DevValveIsol
 Language     The language the block is written in      DB
 Number     Block number (manually specified)    31000
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: Information
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Title       Block title in the form:            Dynamic DB [DEVICE DRIVER] — Isolating Valve
         Dynamic DB module [FUNCTION] — Description
 Comment     Copyright message from block header    See block header § 3.3.1
 Version      For a revision in the form nnn.amm,     00.8
         it shows nn.a
 Family        Block function group (without spaces)     DeviceDriver
 Author        The block author, initial and surname   M_Gledhill
         use underscore in place of spaces
 User-defined ID    The block ID               Dy_DevValveIsol
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: Attributes
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Optimized block   Should be active             Box is ticked
 access 
 ――――――――――――――――――――――――――――――――――――――――――――――――――



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.10.4  BLOCK PROPERTIES FOR STATIC UDTs


 PROPERTY      FORMAT                 EXAMPLE
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: General
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Name      Block name                UT11001_St_DevValveIsol
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: Information
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Title       Block title in the form:            Static UDT [DEVICE DRIVER] — Isolating Valve
         Static UDT module [FUNCTION] — Description
 Comment     Copyright message from block header    See block header § 3.3.1
 ――――――――――――――――――――――――――――――――――――――――――――――――――



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
3.10.5  BLOCK PROPERTIES FOR DYNAMIC UDTs


 PROPERTY      FORMAT                 EXAMPLE
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: General
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Name      Block name                UT31001_Dy_DevValveIsol
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 AREA: Information
 ――――――――――――――――――――――――――――――――――――――――――――――――――
 Title       Block title in the form:            Dynamic UDT [DEVICE DRIVER] — Isolating Valve
         Dynamic UDT module [FUNCTION] — Description
 Comment     Copyright message from block header    See block header § 3.3.1
 ――――――――――――――――――――――――――――――――――――――――――――――――――

 ――――――――――――――――――――――――――――――――――――――――――――――――――


               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
4.     Supervisory system interface


FC61000 is an Example Documentation block, it is a documentation module that contains 
examples of all the common block and network comments used through-out the PAL software. 
As such it does not have any supervisory system interface.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
5.     PARAMETERS


The following parameters are associated with the block:

 
 ――――――――――――――――――――――――――――――――――――――――――
 PARAM         FUNCTION                    TYPE      IN-OUT 
 ――――――――――――――――――――――――――――――――――――――――――
 SYS_SIGNALS      Common system signals              UT21000    In
          logic and timing signals for parametric access
 ――――――――――――――――――――――――――――――――――――――――――

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
6.     DATA STRUCTURES AND USAGE


The block has the following associated data structure:


 ――――――――――――――――――――――――――――――――――――――――――
 DATA STRUCTURE             DESCRIPTION
 ――――――――――――――――――――――――――――――――――――――――――
 UT01000_St_SysRevision          Revision information for this block    See FC01001
 UT01001_St_SysLicence           Licence information for this block  See FC01001
 UT21000_Dy_SysSignals           System signals for logic and timing  See FC01001
 ――――――――――――――――――――――――――――――――――――――――――

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
7.     CONSTANTS AND TEMPORARY (LOCAL) DATA



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
7.1     Constants


The following constants data is used:

 CONSTANTS DATA
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME       Value     FUNCTION                  TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 k_PI         3.141592    Value of Pi (π)                 Real
 k_2PI          6.283185    Value of 2 X Pi (2π)              Real
 ――――――――――――――――――――――――――――――――――――――――――



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
7.2     Temporary (local) data


The following temporary data is used:

 TEMPORARY (LOCAL) DATA
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME          FUNCTION                     TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 wrkPercentPV          Process Variable as a percentage of inst. range     Real
 revInfo             Revision information for the block            UT01000
 licInfo           Licensing information for the block         UT01001
 wrkInt           Working storage area (integer)             Int
 wrkDInt           Working storage area (double integer)            DInt
 wrkReal           Working storage (Real)                Real
 ――――――――――――――――――――――――――――――――――――――――――

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━

 

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
8.     BLOCK CALLS AND ASSOCIATIONS


This section details any blocks which may be called from within this software module (subroutine 
functions for example), any partner blocks with which it may be associated (for example a 
receive module that is partner with a transmit module &amp;c.). It lists any system functions which 
may be called (e.g. reading the real time clock) and any system data types that may be used.

Finally, it lists any special calling requirements for the block (for example, must be called from 
within a cyclic interrupt organisation block) and if the block is using “optimised access” (this is 
the default arrangement).



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
8.1     Block calls from within this module


There are no PAL block calls from within this block.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
8.2     Blocks associated with this module


This is a stand-alone block and is not associated with any other blocks.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
8.3     System block calls and system data types


There are no system block calls.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
8.4     Special properties and requirements



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
8.4.1     Block optimisation, IEC compatibility and library conformance


   •   Block optimisation is ACTIVE for this block.

   •   The block has been checked for IEC compatibility and is compliant.

   •   The block is compatible with all IEC library-conformance module constraints



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
8.4.2     Calling requirements


This block is a documentation block and as such is a reference block that should not be called.

The block itself does not contain any executable code, with the exception of the revision and
licence networks, all networks are empty. The block itself does nothing, and its execution will
have no effect, other than extending the cycle time.

████████████████████████████████████████████
█                                          █
█ Note:   FC61000 should not be present in any final software generated with the PAL.    █
█                                          █
█     It is intended, purely as a development tool that makes the documenting      █
█     of software modules easier.                          █
█                                          █
████████████████████████████████████████████

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
9.     EXAMPLE USAGE


FC61000 is an example module for documentation only. It should not be called (the module 
does nothing and has no executable software of any practical purpose). 

Should it be called, the following shows a typical arrangement:


                       ┌────────────
   ────────────────────┤ FC61000 
                       ├──────────
     "DB21001_DY_StdGlobalData".SysSignals ─┤ SYS_SIGNALS
                       │
                       │               │
                       │               │
                                    │
                       ─────────────┘


████████████████████████████████████████████
█                                          █
█ Note:   FC61000 should not be present in any final software generated with the PAL.    █
█                                          █
█     It is intended, purely as a development tool that makes the documenting      █
█     of software modules easier.                          █
█                                          █
████████████████████████████████████████████

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
10.     TEST AND VERIFICATION PATH


The following diagram shows the full test and verification path for the formal release of each 
version of the software module. See the Test Plan [Ref. 003] for full details, available here:
        http://psop.uk/pal-tp-p


        FC61000-T001         FC61000-T002

    Test version: 000.801     Test version: 001.801
 Released version: 001.000     Released version: 002.000
Released commit: D0002    Released commit: D0011

       SCR      SMT         SCR      SMT  
＿＿＿＿＿＿┌┐＿＿ ▛▜ ＿＿＿＿＿＿＿＿┌┐＿＿ ▛▜ ＿＿
      └┘   ▙▟         └┘   ▙▟   
Initial test           Comment update

Initial test to release the      Comments updated &amp; 
module following the      expanded. Empty networks 
development stage.       added.
Full SMTS            Full SMTS


Where:
――――――――――――――――――――――――――――――――――――――――――――
 SCR    Source Code Review      A visual inspection of the software to ensure it has been written  
┌┐             to the correct standards, uses the correct structures within the
└┘             software and is generally suitable for deployment.               

 SMT Software Module Test    A full and detailed test of an individual software module in
  ▛▜              isolation; such testing requires that all branches of the 
  ▙▟              software are tested. 

               It tests all the interfaces to the module, any data recorded or 
               stored by the module, all error and exception handling functions 
               and tests all timed and interrupt driven operations.

 SCV Software Compatibility     A mechanism for verifying that no executable code software 
╓╖    Verification          changes have been made to a module following changes to
╙╜             comment fields.

               Allows typographical errors &amp;c. to be corrected without forcing 
               a full SMT on a module that has not functionally changed.
――――――――――――――――――――――――――――――――――――――――――――

An SCV can only be performed on a module that has at some point previously, successfully 
completed both an SCR and SMT. Where an SCV is implemented, it replaces the requirement for 
both the SCR and the SMT for the test iteration in question.


               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



██████████████ █ █ █ █  END   █ █ █ █ ██████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="10" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="11" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Block description — Sections 3.5 to 9</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="12" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource><FlgNet xmlns="http://www.siemens.com/automation/Openness/SW/NetworkSource/FlgNet/v4">
  <Parts>
    <Access Scope="LocalVariable" UId="21">
      <Symbol>
        <Component Name="SYS_SIGNALS" />
        <Component Name="_False" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="22">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'FC61000'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="23">
      <Symbol>
        <Component Name="revInfo" />
        <Component Name="REV_BLOCK" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="24">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'001.107'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="25">
      <Symbol>
        <Component Name="revInfo" />
        <Component Name="REV_NUMBER" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="26">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'2022.04.04'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="27">
      <Symbol>
        <Component Name="revInfo" />
        <Component Name="REV_DATE" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="28">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'M. Gledhill'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="29">
      <Symbol>
        <Component Name="revInfo" />
        <Component Name="REV_AUTHOR" />
      </Symbol>
    </Access>
    <Part Name="Contact" UId="30">
      <Negated Name="operand" />
    </Part>
    <Part Name="S_Move" UId="31" DisabledENO="true" />
    <Part Name="S_Move" UId="32" DisabledENO="true" />
    <Part Name="S_Move" UId="33" DisabledENO="true" />
    <Part Name="S_Move" UId="34" DisabledENO="true" />
  </Parts>
  <Wires>
    <Wire UId="35">
      <Powerrail />
      <NameCon UId="30" Name="in" />
    </Wire>
    <Wire UId="36">
      <IdentCon UId="21" />
      <NameCon UId="30" Name="operand" />
    </Wire>
    <Wire UId="37">
      <NameCon UId="30" Name="out" />
      <NameCon UId="31" Name="en" />
      <NameCon UId="32" Name="en" />
      <NameCon UId="33" Name="en" />
      <NameCon UId="34" Name="en" />
    </Wire>
    <Wire UId="38">
      <IdentCon UId="22" />
      <NameCon UId="31" Name="in" />
    </Wire>
    <Wire UId="39">
      <NameCon UId="31" Name="out" />
      <IdentCon UId="23" />
    </Wire>
    <Wire UId="40">
      <IdentCon UId="24" />
      <NameCon UId="32" Name="in" />
    </Wire>
    <Wire UId="41">
      <NameCon UId="32" Name="out" />
      <IdentCon UId="25" />
    </Wire>
    <Wire UId="42">
      <IdentCon UId="26" />
      <NameCon UId="33" Name="in" />
    </Wire>
    <Wire UId="43">
      <NameCon UId="33" Name="out" />
      <IdentCon UId="27" />
    </Wire>
    <Wire UId="44">
      <IdentCon UId="28" />
      <NameCon UId="34" Name="in" />
    </Wire>
    <Wire UId="45">
      <NameCon UId="34" Name="out" />
      <IdentCon UId="29" />
    </Wire>
  </Wires>
</FlgNet></NetworkSource>
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="13" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="14" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
MODIFICATION HISTORY

The revision data shown here, in the network comments, contains additional information 
reflecting the software development workflow under the version control system (VCS) employed 
to track all software changes.

The VCS in use is the Git Source Code Management system in conjunction with the GitHub online 
hosting system. The software in its entirety is available in the GitHub remote repository:

     https://github.com/practicalseries/PS2001-pal-software

The repository is public and can be freely copied (forked in GitHub terminology) and used 
under the MIT licence. 

The MIT licence is reproduced in full in the last network of this software module.


 ―――――――――――――――――――――――――――――――――――――――――――
 DATE       REVISION             MASTER BRANCH     DEV
         (nnn.amm)   COMMIT TAG    (Base ---> Merge)    BRANCH   Author
 ———————————————————————————————————————————
 2022.04.04    001.107   D0010A-000.103   D0010 N/A     D0010A   M. Gledhill
                       Comments Section 4 (SCADA) added

 2022.04.01    001.106   D0010A-000.102   D0010 N/A     D0010A   M. Gledhill
                       Comments corrected, small letters added

 2022.03.24    001.105   D0010A-000.101   D0010 N/A     D0010A   M. Gledhill
                       Comments updated and expanded

 2022.03.14    001.104   D0009A-000.101   D0009 N/A     D0009A   M. Gledhill
                       Block description  mod, sec 7-10 combined

 2022.01.12    001.103   D0009A-000.101   D0009 N/A     D0009A   M. Gledhill
                       Missing Greek characters added

 2021.08.10    001.102   D0008A-000.103   D0008 N/A     D0008A   M. Gledhill
                       Constants table added to network 8

 2021.05.18    001.101   D0005A-000.102   D0005 N/A     D0005A   M. Gledhill
                       OB1 secondary commit revision added
                       OB1 document list updated

 2021.02.18    001.000   D0002      D0001 D0002  None    M. Gledhill
                       FC61000 — RELEASED FOR USE
                         Block imported form 000.125-Db
 ———————————————————————————————————————————
  Where: nnn  =  Major revision
        a  =  Type (1-7 Development, 8 Proving, 9 Qualification, 0 Release)
      mm  =  Minor revision (must be 00 if a = 0)
        Block properties version number should be set to nn.a (only one decimal place)

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="15" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="16" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text> Current revision and modification history</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="17" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="18" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="19" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

TITLE:    PS2001 — PRACTICAL SERIES AUTOMATION LIBRARY

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


――――――――――――――――――――――――――――――――――
COPYRIGHT:       © 2020 Michael Gledhill
          Part of the Practical Series of Publications
          Published in the United Kingdom
          mg@practicalseries.com
          https://practicalseries.com
――――――――――――――――――――――――――――――――――
CUSTOMER:       Practical Series of Publications (PSP)

PROJECT:      Practical Series Automation Library (PAL)

PROJECT NO.:       PS2001
――――――――――――――――――――――――――――――――――
CONTROLLER:       CPU 1515-2PN/DP

CONTROLLER NAME:    CON100

IP ADDRESS:      192.168.001.100
――――――――――――――――――――――――――――――――――
TIA PROJECT NAME:    PS2001-PAL-D0009A-000-801 [PS2001-PAL-D0010]

STATUS:        DEVELOPMENT
――――――――――――――――――――――――――――――――――
PROTECTION:     To minimise the risk of inadvertent modification to 
          tested modules, certain blocks will be released for 
          use with “protected access” (referred to a “write 
          protection” in Siemens terminology), this allows the 
          block to be used normally, but prevents the block 
          being accidentally modified. 

          This is in accordance with the risk assessment given 
          in the Validation Plant (VP), Appendix A [Ref. 002].

          ┌─────────────────────┐
          │ THE WRITE PROTECTION PASSWORD IS: PS2001 │
          └─────────────────────┘


▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
PROJECT OVERVIEW


The PAL is a library of software modules and templates that have been developed for the 
Siemens Simatic S7-1500 range of controllers (and to a lesser extent the S7-1200 range).

The full library and all necessary documentation is available from the Practical Series website:

     https://practicalseries.com/2001-pal/index.html


The PAL is configured and deployed using the Siemens Simatic TIA Portal programming 
environment.

The PAL software structure is designed such that it is applicable to virtually all industrial 
applications that can generally controlled by a programmable logic controller.

The PAL software being developed as part of this Project, is considered to be suitable for use in 
the following types of industries (this is not an exhaustive list):

   •   Water and waste water treatment
   •   Pharmaceutical and batch production
   •   Brewing and fermentation
   •   Chemical manufacturing
   •   Oil and gas systems
   •   Food and beverage production

Such applications can generally be thought of as processes that operate with a response time
of more than 100 ms. I.e. the system would not be expected to respond to some stimuli faster
than 100 ms. In practice, a Controller may (and usually will) respond faster than this; however, 
a response time of 100 ms is considered to be an acceptable limit for PLC control.

At its most basic level, the PAL will be a library of software modules that control the fundamental 
aspects of an industrial plant; such modules would for example read the value of an instrument, 
operate a valve or drive, perform a calculation &amp;c.

Such software modules are referred to as standard modules, these are fixed modules that 
perform a particular function and are identical across all software installations.

The PAL also contains application specific modules; these contain software that is applicable 
to the plant being controlled.

The Practical Series Automation Library is freely available under the MIT Open Source licence 
(see below). Those who find it useful may, if they wish, make a donation to support the library. 

Donations can be made here:

     https://practicalseries.com/2001-pal/11-web/81-00-pay.html

The PAL contains fully deployable software that has been developed by the author in his 
profession as a chartered electrical engineer. It is currently in use on various live plants 
throughout the UK and in some other parts of the world. 

This software is suitable for controlling and automating most industrial applications (typical 
process applications). It is easy to use and configure, but does have a degree of practical 
complexity appropriate for the environments within which it is employed. It is heavily 
configurable, has various operating modes and is suitable for a multitude of industrial 
applications.

IF YOU DON’T UNDERSTAND IT, DON’T USE IT. IF YOU DO USE IT, YOU DO SO AT YOUR OWN RISK.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
DOCUMENT REFERENCES

 ――――――――――――――――――――――――――――――――――――――――――
 REF.     DOCUMENT NO.       TITLE
 ――――――――――――――――――――――――――――――――――――――――――
 001  PS2001-5-0101-001   Quality Plan (QP)
 002  PS2001-5-0121-002   Validation Plan (VP)
 003  PS2001-5-0131-003   Test Plan (TP)
 004  PS2001-5-1101-001   User requirements specification (URS)
 005  PS2001-5-1111-001   Requirement Traceability Matrix (RTM)
 006  PS2001-5-2101-001   Functional Specification (FS) 
 007  PS2001-5-2211-001   Hardware Design Specification (HDS)
 008  PS2001-5-2311-001   Software Design Specification (SDS)
 009  PS2001-5-2313-011   Style Guide (SG)
 010  PS2001-5-234101-001    ES/WDP Configuration Manual
 011  PS2001-5-2312-fcNo.    Software Module Design Specification (SMDS)
 012  PS2001-5-2301-001   Software Module Register (SMR)
 013  PS2001-5-2302-011   Software Control and Mechanism (SCM)
 014  PS2001-5-7111-001   User Guide (UG)
 ――――――――――――――――――――――――――――――――――――――――――
 Note:   Where a block references another document not listed above (a calculation sheet
     for example), that document will be referenced separately in section 1.1 of the 
     block description for the block in question.


A full list of all project documentation is available here:

     https://practicalseries.com/2001-pal/21-project/01-00-docs.html

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
COMPLETED MODULES 

 ――――――――――――――――――――-―-- STATIC DATA       ― DYNAMIC  DAT A   ―
 BLOCK     NAME         REVISION    UDT/DB    REVISION  UDT/DB    REVISION  
 ――――――――――――――――――――――――――――――――――――――――――
 FC01001 StdSysGlobalData      001.000   None           UT 21000   001.000
                 2021-05-11                  UT 21001   001.000
                                   DB21001   001.000
 ――――――――――――――――――――――――――――――――――――――――――
 FC02001 StdInstAnalogRead    001.000   UT 02001   001.000    UT 22001   001.000
                 2021-05-26   DB02001   001.000       DB22001   001.000
 ――――――――――――――――――――――――――――――――――――――――――
 FC11001 StdDevValveIsol      001.000   UT 11001   001.000    UT 31001   001.000
                 2021-08-23   DB11001   001.000       DB31001   001.000
 ――――――――――――――――――――――――――――――――――――――――――
 FC18001 StdSubScaleAI      001.000   None           None 
                 2021.05.22   None           None          
 ――――――――――――――――――――――――――――――――――――――――――
 FC18151 StdSubTimeEventRTC   001.000   None           UT 38151   001.000
                 2021-02-19                  DB38151   001.000
 ――――――――――――――――――――――――――――――――――――――――――
 FC61000 DocGenExample     001.101   None           None 
                 2021.05.10   None           None          
 ――――――――――――――――――――――――――――――――――――――――――
 See Software Module Register [Ref. 012] for full details

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━


▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
LICENCE AND CONTACT INFORMATION

This software and its associated documentation is made available under the MIT Licence:

════════════════════════════════════════════

The MIT License (MIT)

Copyright © 2020 Michael Gledhill

Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
and associated documentation files (the “Software”), to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, merge, publish, distribute, 
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is 
furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included in all copies or 
substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

════════════════════════════════════════════
                   ┌────────────┐
You can reach the author by email here:   │  mg@practicalseries.com  │
                   └────────────┘
Questions, corrections, constructive criticism and complaints (polite ones) are invited.

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



██████████████ █ █ █ █  END   █ █ █ █ ██████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="1A" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="1B" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Project description ━━ [OB1 NETWORK 1 EXAMPLE]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="1C" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="1D" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="1E" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
MODIFICATION HISTORY

The revision data herein contains the current revision of the whole software project 
(rather than of a particular block). The whole project is issued at a particular release and this is 
independent of individual module revisions.

The revision data shown here, in the network comments, contains additional information 
reflecting the software development workflow under the version control system (VCS) employed 
to track all software changes.

The VCS in use is the Git Source Code Management system in conjunction with the GitHub online 
hosting system. The software in its entirety is available in the GitHub remote repository:

     https://github.com/practicalseries/PS2001-pal-software

The repository is public and can be freely copied (forked in GitHub terminology) and used 
under the MIT licence. 

The MIT licence is reproduced in full in the last network of this software module.


 ———————————————————————————————————————————
 DATE       COMMIT TAG     AUTHOR        REASON FOR MODIFICATION
 ———————————————————————————————————————————
 2021.03.04    D0010      M. Gledhill      FC19512 — RELEASED FOR USE

 2022.03.04    D0009A.001.000   M. Gledhill      FC19512 — Post-test release   [secondary commit, delete at next primary commit]
 2022.02.19    D0009A.000.801   M. Gledhill      FC19512 — Released for test   [secondary commit, delete at next primary commit]
 2022.02.18    D0009A.000.103   M. Gledhill      FC19512 — Incremental build [secondary commit, delete at next primary commit]
 2022.02.02    D0009A.000.102   M. Gledhill      FC19512 — Incremental build [secondary commit, delete at next primary commit]
 2022.01.12    D0009A.000.101   M. Gledhill      FC19512 — Created

 2021.08.23    D0009      M. Gledhill      FC11001 — RELEASED FOR USE

 2021.05.26    D0008      M. Gledhill      FC02001 — RELEASED FOR USE

 2021.05.22    D0007      M. Gledhill      FC18001 — RELEASED FOR USE

 2021.05.11    D0006      M. Gledhill      FC01001 — RELEASED FOR USE

 2021.05.02    D0005      M. Gledhill      Typographical corrections only

 2021.05.02    D0004      M. Gledhill      Typographical corrections only

 2021.02.19    D0003      M. Gledhill      FC18151 — RELEASED FOR USE

 2021.02.18    D0002      M. Gledhill      Baseline build

 2021.02.18    D0001      M. Gledhill      Hardware build

 2021.02.18    D0000      M. Gledhill      Initial commit — repository created
 ———————————————————————————————————————————


▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="1F" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="20" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Project revision and modification history ━━ [OB1 NETWORK 2 EXAMPLE]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="21" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="22" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="23" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＳＴＡＮＤＡＲＤ  ▄▄ 


TITLE:    SUBROUTINE — EVENT TIMER RTC


▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ 
 
┌──────────────────────────────────────────┐
│                                          │
│          FC18151 — SOFTWARE MODULE DESIGN SPECIFICATION (SMDS)            │
│                                          │
│      The PDF version of the SMDS for this module is available online here:        │
│              http://psop.uk/pal-smds-fc18151-p              │
│                                          │
│      It is also available as part of the Project User Defined Documentation,      │
│      it can be accessed by selecting this module in the Project Tree          │
│      (on the left) and pressing SHIFT+F1                        │
│                                          │
└─────────────────────────────────────── ʷᴵᴰ⁻ᵇᵈᵃ ┘

FC18151_SubTimeEventRTC is a subroutine block that times the duration of an event 
to nanosecond resolution.

The block records the time the event started (rising edge of the TRIGGER signal), the time the 
event ended (falling edge of the TRIGGER signal) and calculates the duration of the event (end 
time minus the start time).

The start and end times are read from the real time clock of the controller.

This is a subroutine block.



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
1.     BLOCK TECHNICAL SUMMARY


 ――――――――――――――――――――――――――――――――――――――――――
 NOMENCLATURE &amp; ADDRESSING
 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK TITLE         Event Timer RTC
 BLOCK FUNCTION GROUP    Subroutine
 BLOCK ADDRESS       FC18151
 BLOCK SYMBOL        FC18151_SubTimeEventRTC
 BLOCK USER ID         SubTimeEventRTC

 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK TYPE &amp; USAGE
 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK TYPE         Function (FC)
 BLOCK NUMBER        18151
 LANGUAGE           LAD
 OPTIMISED ACCESS     Yes
 PAL USAGE TYPE       Standard block

 ――――――――――――――――――――――――――――――――――――――――――
 METRICS
 ――――――――――――――――――――――――――――――――――――――――――
 EXECUTION TIME       18.4 μs¹
 LOAD MEMORY       20.1 kB
 WORK MEMORY           0.4 kB  
 ――――――――――――――――――――――――――――――――――――――――――
               ¹ Measured on: CPU-1515-2PN (order no. 6ES7512-2AM02-0AB0) 
                            http://psop.uk/pal-ds-cpu1515



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
1.1      Additional document references


In addition to the documents referenced in OB1 (section DOCUMENT REFERENCES), the 
following documents are associated with this module:


 ――――――――――――――――――――――――――――――――――――――――――
 REF.     DOCUMENT NO.       TITLE
 ――――――――――――――――――――――――――――――――――――――――――
 101  PS2001-5-2331-001-01   FC19512 Calculation Sheet
 102  PS2001-5-2331-001-02   FC19512 2nd Order Response Simulation Spreadsheet
 ――――――――――――――――――――――――――――――――――――――――――


[Alternate text, use if there are no additional references]
Only those documents specified in OB1 (section DOCUMENT REFERENCES) are listed within this 
block. There are no additional document references.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
2.     FUNCTIONAL DESCRIPTION


FC18151 is the Subroutine Event Timer using RTC block, it simply records the duration of an event 
with a high degree of accuracy. The event being timed is a Boolean signal passed to the block as 
the TRIGGER parameter.

Three times are recorded for the event, the start time (rising edge of the TRIGGER parameter), the 
end time (falling edge of the TRIGGER parameter) and the duration of the event (end time minus 
the start time). The duration is calculated on the falling edge of the TRIGGER parameter, 
immediately after the end time is recorded.

The start and end times are read from the Controller’s internal real time clock (RTC) and are 
stored in DTL (date time long) format, this format contains year, month, day, hours, minutes, 
seconds, milliseconds, microseconds and nano seconds.

The duration is stored in LTime (long time, 64-bit) format, and is very accurate, it resolves to 
days, hours, minutes, seconds milliseconds, microseconds and nanoseconds, it keeps this 
resolution irrespective of the duration.

The duration is also calculated as a real number in seconds (or fractions thereof); this is a 
more convenient format for holding the duration, but is not as accurate as the LTime format.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
3.     DETAILED BLOCK DESCRIPTION


The purpose of this block is to determine with a high degree of accuracy the duration of an event, 
the event itself must be in the form of a Boolean trigger signal, the rising edge of the signal is 
considered to be the start of the event and the falling edge the end of the event.

The event signal is passed to the block as the TRIGGER parameter. 
The block returns five values, these are stored in a UDT passed to the block in the 
DYNAMIC_DATA parameter: 

 ――――――――――――――――――――――――――――――――――――――――――
 PARAM         ASSOCIATED UDT            ASSOCIATED DATA BLOCK
 ――――――――――――――――――――――――――――――――――――――――――
 DYNAMIC_DATA     UT38151_Dy_SubTimeEventRTC       DB38151_Dy_SubTimeEventRTC
 ――――――――――――――――――――――――――――――――――――――――――


The block returns the following data:

 UT38151_Dy_SubTimeEventRTC
 ―――――――――――――――――――――――――――――――――――――――――― 
 SIGNAL NAME          FUNCTION                     TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 status_Running      STATUS — The event timer is running         Bool

 actual_StartTime      ACTUAL — Time at which the TRIGGER signal        DTL
                     went high (event start time)

 actual_EndTime        ACTUAL — Time at which the TRIGGER signal     DTL
                     went low (event end time)

 actual_Duration        ACTUAL — Event duration              LTime

 actual_DurationSec       ACTUAL — Event duration in seconds           REAL
 ――――――――――――――――――――――――――――――――――――――――――
 Block returned signals



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.1     Timing an event


The block constantly monitors the TRIGGER parameter; if a rising edge is seen on the TRIGGER 
parameter (point ① in the figure below), the Controller RTC is read and its value is stored in 
actual_StartTime, at the same time the running signal (status_Running) is activated.

The block continues to monitor the TRIGGER parameter, when a falling edge is detected 
(point ②), the RTC is read once more and its value is stored in actual_EndTime, and the running 
signal (status_Running) is deactivated.

Once the end time is stored, the following calculation is carried out:


┌───────────────────────────┐
│ actual_Duration =  actual_EndTime ─ actual_StartTime    │
└───────────────────────────┘


                    ①            ②
  TRIGGER │             ┏━━━━━━━━━━━━┓
        │             ┃               ┃
        │             ┃               ┃
        │             ┃               ┃
        │             ┃               ┃                              
        ┼━━━━━━━━━━━━╶╶╶╶╶╶╶╶╶╶╶╶╶━━━━━━━━━━ time
                 ↗             ↖
         actual_Start_Time ╎            ╎ actual_End_Time
   DTL#2020-04-18-09:34:25.899548353        DTL#2020-04-18-09:34:36.004744916

                   ╎               ╎                      actual_Duration
                                     LT#10S_105MS_196US_563NS
                   ╎               ╎  
                                                    actual_DurationSec
                   ╎               ╎                              10.10519

        │status_Running      ┏━━━━━━━━━━━━┓
        │             ┃               ┃
        │             ┃               ┃
        │             ┃               ┃
        │             ┃               ┃
        ┼━━━━━━━━━━━━╶╶╶╶╶╶╶╶╶╶╶╶╶━━━━━━━━━━



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
3.2     Date and time data types


Both the start and end times (actual_StartTime and actual_EndTime) are of the type DTL 
(date time long), this itself is a data structure in the form:

 DTL Data Structure
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME          FUNCTION                     TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 YEAR             Year (returns a value in the range 1970 to 2262)     UInt
 MONTH            Month (1-12 representing Jan to Dec)        USInt
 DAY              Day of month (1-31)                USInt
 WEEKDAY          Day of week (1-7, where 1=Sunday, 7=Saturday)    USInt
 HOUR           Hour of day (0-23)                   USInt
 MINUTE           Minutes (0-59)                   USInt
 SECOND            Seconds (0-59)                  USInt
 NANOSECOND        Nanoseconds (0-999,999,999)           UDint
 ――――――――――――――――――――――――――――――――――――――――――

When displayed, it has the format:

      DTL#2020-04-18-09:34:25.899548353

 I.e.      18th April 2020 at 09:43:25 AM and 899,548,353 ns.

The calculated duration (actual_Duration) is of data type LTime (long time).

The LTime data type is essentially an 8-byte number (64-bit number) that stores a time value in 
nanoseconds. In the above example, the actual_Duration has the formatted value of:

      LT#10S_105MS_196US_563NS

 I.e.      10 seconds, 105 milliseconds, 196 microseconds and 563 nanoseconds.

It is shown in this format, because TIA portal understands the LTime data type and is able to 
interpret the value as days, hours, minute, seconds, milliseconds, microseconds and 
nanoseconds. 

In practice, the actual_Duration simply (in this example) holds a very large number:

      10,105,196,563

This is the duration of the event in nanoseconds (i.e. 10,105,196,563 nanoseconds). To convert 
the number to seconds, simply divide by 1,000,000,000 (or 1 × 10^9); this would give:

      10.105196563 seconds

The reason the duration is specified as an LTime rather that DTL is that, somewhat confusingly, 
DTL is a relative measure of time (relative to 1st January, 1970), if the above duration were 
represented as a DTL value it would read:

      DTL#1970-01-01-00:00:10.105196563

Hours, minutes and seconds are OK, but the date part doesn’t make sense (to make it 
meaningful, 1970 must be subtracted from the YEAR value and 1 from both the MONTH and 
DAY values).

The LTime data type can store a duration of up to 106,751 days (about 300 years) and while not 
perfect, it seems long enough for most practical situations (possibly not for geological 
applications).

The actual_Duration in LTime format is very accurate, but it is an unwieldly data type, to provide a 
more user friendly (although less accurate) format, the actual_Duration signal is converted to a 
real number giving the duration in seconds, this is stored in the actual_DurationSec signal. In the 
above example: 

      actual_DurationSec has the value 10.10519 seconds

It is less accurate, it does not resolve to nanoseconds; however, it is easier to use and display 
and is accurate enough for most applications.



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
A note on real numbers

The LTime format is very accurate, it is basically counting nanoseconds, and because it is 64-bits 
long it can count up to very high values (about 584 years at nanosecond resolution).

Real numbers however, are limited to 32-bits and suffer from precision loss, this results from the 
fact that the real number has an accuracy of “about” 7 decimal digits, for example 20365.45, 
20.43728, 1.482967, 0.3356428, &amp;c. Essentially, the bigger the number, the fewer the decimal 
places — a total of 7 decimal digits.

Very big and very small numbers can be represented by adding trailing zeros for big numbers 
(e.g. 3275625000) and leading zeros for small numbers (0.000003275625) in both these 
examples, there are only 7 decimal digits, just shifted effectively left or right.

This type of representation is usually handled by applying scientific notation, the number 
1,568,497,000,000 would be represented as 1.568497 × 10^12, it only has 7 decimal digits, 
the number 1,568,497,132,792, would be represented as exactly the same value, the 132,792 
part of the number cannot be resolved and are lost.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
4.     Supervisory system interface


See the online documentation for this block — select the block in the project tree and press:
     SHIFT + F1 or follow the link: http://psop.uk/pal-smds-fc18151-p 

An explanation of the block icons and faceplates available to the supervisory system for this 
module is given in section 4 of the SMDS document [Ref. 011].

A downloadable copy of the SMDS (and all other project documentation) is available here:

     https://practicalseries.com/2001-pal/21-project/01-00-docs.html

For this module, the document number is: PS2001-5-2312-fc1815

[Alternate text]
This module does not interface with a supervisory system.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
5.     PARAMETERS


The following parameters are associated with the block:

 
 ――――――――――――――――――――――――――――――――――――――――――
 PARAM         FUNCTION                    TYPE      IN-OUT 
 ――――――――――――――――――――――――――――――――――――――――――
 SYS_SIGNALS      Common system signals              UT21000    In
          logic and timing signals for parametric access

 TRIGGER       Event trigger signal (a rising edge marks the     Bool   In
          start of the event, the falling edge the end)


 DYNAMIC_DATA      Stores the results of the event timing       UT38151    InOut
 ――――――――――――――――――――――――――――――――――――――――――

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
6.     DATA STRUCTURES AND USAGE


The block has the following associated data structure:


 ――――――――――――――――――――――――――――――――――――――――――
 DATA STRUCTURE             DESCRIPTION
 ――――――――――――――――――――――――――――――――――――――――――
 UT01000_St_SysRevision          Revision information for this block    See FC01001
 UT01001_St_SysLicence           Licence information for this block  See FC01001
 UT21000_Dy_SysSignals           System signals for logic and timing  See FC01001
 UT38151_Dy_SubTimeEventRTC        Dynamic data structure for the event timing block
 ――――――――――――――――――――――――――――――――――――――――――



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
6.1     UT38151_Dy_TimeEventRTC


Stores the timing values for the event:

 UT38151_Dy_TimeEventRTC
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME          FUNCTION                     TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 status_Running      STATUS — The event timer is running         Bool

 actual_StartTime      ACTUAL — Time at which the TRIGGER signal        DTL
                     went high (event start time)

 actual_EndTime        ACTUAL — Time at which the TRIGGER signal     DTL
                     went low (event end time)

 actual_Duration        ACTUAL — Event duration              LTime

 actual_DurationSec       ACTUAL — Event duration in seconds           REAL
 ――――――――――――――――――――――――――――――――――――――――――

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
7.     CONSTANTS AND TEMPORARY (LOCAL) DATA



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
7.1     Constants


The following constants data is used:

 CONSTANTS DATA
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME       Value     FUNCTION                  TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 k_PI         3.141592    Value of Pi (π)                 Real
 k_2PI          6.283185    Value of 2 X Pi (2π)              Real
 ――――――――――――――――――――――――――――――――――――――――――



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
7.2     Temporary (local) data


The following temporary data is used:

 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME          FUNCTION                     TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 revInfo             Revision information for the block            UT01000
 licInfo           Licensing information for the block         UT01001
 wrkInt           Working storage area (integer)             Int
 wrkReal           Working storage (Real)                Real
 wrkLInt            Working storage area (long integer)           LInt
 ――――――――――――――――――――――――――――――――――――――――――

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
8.     BLOCK CALLS AND ASSOCIATIONS


This section details any blocks which may be called from within this software module (subroutine 
functions for example), any partner blocks with which it may be associated (for example a 
receive module that is partner with a transmit module &amp;c.). It lists any system functions which 
may be called (e.g. reading the real time clock) and any system data types that may be used.

Finally, it lists any special calling requirements for the block (for example, must be called from 
within a cyclic interrupt organisation block) and if the block is using “optimised access” (this is 
the default arrangement).



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
8.1     Block calls from within this module


There are no PAL block calls from within this block.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
8.2     Blocks associated with this module


This is a stand-alone block and is not associated with any other blocks.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
8.3     System block calls and system data types


The following calls are made to system blocks:


 System block calls
 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK          TITLE             DESCRIPTION  
 ――――――――――――――――――――――――――――――――――――――――――
 RD_LOC_T             Read the local RTC time    Reads the CPU real time clock 
 ――――――――――――――――――――――――――――――――――――――――――

There are no special system data types used.



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
8.4     Special properties and requirements



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
8.4.1     Block optimisation, IEC compatibility and library conformance


   •   Block optimisation is ACTIVE for this block.

   •   The block has been checked for IEC compatibility and is compliant.

   •   The block is compatible with all IEC library-conformance module constraints



▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
8.4.2     Calling requirements


This block is a documentation block and as such is a reference block that should not be called.

The block itself does not contain any executable code, with the exception of the revision and
licence networks, all networks are empty. The block itself does nothing, and its execution will
have no effect, other than extending the cycle time.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
9.     EXAMPLE USAGE


The following shows a typical deployment of FC18151:

                     ┌─────────────
       ──────────────┤ FC18151
                     ├───────────
                %M100.0    │
              "Event001"   ─┤ TRIGGER
                     │
    "DB38151_Dy_TimeEventRTC".Event001 ─┤ DYNAMIC_DATA
                     │
                     │             │
                                   │
                          ─────────┘

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
10.     TEST AND VERIFICATION PATH


The following diagram shows the full test and verification path for the formal release of each 
version of the software module. See the Test Plan [Ref. 003] for full details, available here:
        http://psop.uk/pal-tp-p


        FC18151-T001         FC18151-T002

    Test version: 000.801     Test version: 001.801
 Released version: 001.000     Released version: 002.000
Released commit: D0003    Released commit: D0011

       SCR      SMT              SCV     
＿＿＿＿＿＿┌┐＿＿ ▛▜ ＿＿＿＿＿＿＿＿＿＿＿＿╓╖＿＿
      └┘   ▙▟             ╙╜  
Initial test           Comments standardised

Initial test to release the      Comments updated &amp; 
module following the      minor typographical 
development stage.       corrections
Full SMTS            SCV only


Where:
――――――――――――――――――――――――――――――――――――――――――――
 SCR    Source Code Review      A visual inspection of the software to ensure it has been written  
┌┐             to the correct standards, uses the correct structures within the
└┘             software and is generally suitable for deployment.               

 SMT Software Module Test    A full and detailed test of an individual software module in
  ▛▜              isolation; such testing requires that all branches of the 
  ▙▟              software are tested. 

               It tests all the interfaces to the module, any data recorded or 
               stored by the module, all error and exception handling functions 
               and tests all timed and interrupt driven operations.

 SCV Software Compatibility     A mechanism for verifying that no executable code software 
╓╖    Verification          changes have been made to a module following changes to
╙╜             comment fields.

               Allows typographical errors &amp;c. to be corrected without forcing 
               a full SMT on a module that has not functionally changed.
――――――――――――――――――――――――――――――――――――――――――――

An SCV can only be performed on a module that has at some point previously, successfully 
completed both an SCR and SMT. Where an SCV is implemented, it replaces the requirement for 
both the SCR and the SMT for the test iteration in question.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━



██████████████ █ █ █ █  END   █ █ █ █ ██████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="24" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="25" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Block description — Sections 1 to 9 ━━ [BLOCK LEVEL EXAMPLE]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="26" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource><FlgNet xmlns="http://www.siemens.com/automation/Openness/SW/NetworkSource/FlgNet/v4">
  <Parts>
    <Access Scope="LocalVariable" UId="21">
      <Symbol>
        <Component Name="SYS_SIGNALS" />
        <Component Name="_False" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="22">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'FC01001'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="23">
      <Symbol>
        <Component Name="revInfo" />
        <Component Name="REV_BLOCK" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="24">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'001.000'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="25">
      <Symbol>
        <Component Name="revInfo" />
        <Component Name="REV_NUMBER" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="26">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'2020.11.09'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="27">
      <Symbol>
        <Component Name="revInfo" />
        <Component Name="REV_DATE" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="28">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'M. Gledhill'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="29">
      <Symbol>
        <Component Name="revInfo" />
        <Component Name="REV_AUTHOR" />
      </Symbol>
    </Access>
    <Part Name="Contact" UId="30">
      <Negated Name="operand" />
    </Part>
    <Part Name="S_Move" UId="31" DisabledENO="true" />
    <Part Name="S_Move" UId="32" DisabledENO="true" />
    <Part Name="S_Move" UId="33" DisabledENO="true" />
    <Part Name="S_Move" UId="34" DisabledENO="true" />
  </Parts>
  <Wires>
    <Wire UId="35">
      <Powerrail />
      <NameCon UId="30" Name="in" />
    </Wire>
    <Wire UId="36">
      <IdentCon UId="21" />
      <NameCon UId="30" Name="operand" />
    </Wire>
    <Wire UId="37">
      <NameCon UId="30" Name="out" />
      <NameCon UId="31" Name="en" />
      <NameCon UId="32" Name="en" />
      <NameCon UId="33" Name="en" />
      <NameCon UId="34" Name="en" />
    </Wire>
    <Wire UId="38">
      <IdentCon UId="22" />
      <NameCon UId="31" Name="in" />
    </Wire>
    <Wire UId="39">
      <NameCon UId="31" Name="out" />
      <IdentCon UId="23" />
    </Wire>
    <Wire UId="40">
      <IdentCon UId="24" />
      <NameCon UId="32" Name="in" />
    </Wire>
    <Wire UId="41">
      <NameCon UId="32" Name="out" />
      <IdentCon UId="25" />
    </Wire>
    <Wire UId="42">
      <IdentCon UId="26" />
      <NameCon UId="33" Name="in" />
    </Wire>
    <Wire UId="43">
      <NameCon UId="33" Name="out" />
      <IdentCon UId="27" />
    </Wire>
    <Wire UId="44">
      <IdentCon UId="28" />
      <NameCon UId="34" Name="in" />
    </Wire>
    <Wire UId="45">
      <NameCon UId="34" Name="out" />
      <IdentCon UId="29" />
    </Wire>
  </Wires>
</FlgNet></NetworkSource>
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="27" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="28" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
MODIFICATION HISTORY


The revision data shown here, in the network comments, contains additional information 
reflecting the software development workflow under the version control system (VCS) employed 
to track all software changes.

The VCS in use is the Git Source Code Management system in conjunction with the GitHub online 
hosting system. The software in its entirety is available in the GitHub remote repository:

     https://github.com/practicalseries/PS2001-pal-software

The repository is public and can be freely copied (forked in GitHub terminology) and used 
under the MIT licence. 

The MIT licence is reproduced in full in the last network of this software module.


 ―――――――――――――――――――――――――――――――――――――――――――
 DATE       REVISION             MASTER BRANCH     DEV
         (nnn.amm)   COMMIT TAG    (Base ---> Merge)    BRANCH   Author
 ———————————————————————————————————————————
 2020.11.09    001.000   D0003      D0002 D0003  None    M. Gledhill
                       FC01001 — RELEASED FOR USE
                         Merge back to master branch
 
 2020.11.09    001.000   D0002A-001.000   D0002 N/A     D0002A   M. Gledhill
                       FC01001 — Post-test released for use

 2020.11.08    000.801   D0002A-000.801   D0002 N/A     D0002A   M. Gledhill
                       FC01001 — Released for SMT

 2020.11.04    000.102   D0002A-000.102   D0002 N/A     D0002A   M. Gledhill
                       FC01001 — Incremental build

 2020.11.03    000.101   D0002A-000.101   D0002 N/A     D0002A   M. Gledhill
                       FC01001 — Block created
 ———————————————————————————————————————————
  Where: nnn  =  Major revision
        a  =  Type (1-7 Development, 8 Proving, 9 Qualification, 0 Release)
      mm  =  Minor revision (must be 00 if a = 0)
        Block properties version number should be set to nn.a (only one decimal place)

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="29" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="2A" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Current revision and modification history ━━ [BLOCK LEVEL EXAMPLE]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="2B" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="2C" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="2D" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
↳
TITLE:    HEADINGS, LISTS AND INDENTED TEXT
↳
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄[3 empty lines below]


[Block title]
Standard module [Subroutine] — Event Timer RTC

CLASS module [FUNCTION] — DESCRIPTION


[Block header]
↳
PRACTICAL SERIES AUTOMATION LIBRARY (PAL)   —   COPYRIGHT 2020 – M. GLEDHILL (MIT LICENCE)
                  ———— ◆ ————
FULL ONLINE DOCUMENTATION IS AVAILABLE AT: https://practicalseries.com/2001-pal/index.html



[Block description title]
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＳＴＡＮＤＡＲＤ  ▄▄


TITLE:    FULL DESCRIPTION — FUNCTION


▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
↳
┌──────────────────────────────────────────┐
│                                          │
│          FCnnnnn — SOFTWARE MODULE DESIGN SPECIFICATION (SMDS)            │
│                                          │
│      The PDF version of the SMDS for this module is available online here:        │
│              http://psop.uk/pal-smds-fcnnnnn-p              │
│                                          │
│      It is also available as part of the Project User Defined Documentation,      │
│      it can be accessed by selecting this module in the Project Tree          │
│      (on the left) and pressing SHIFT+F1                        │
│                                          │
└──────────────────────────────────────────┘
↳

[Alternate top lines]
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＳＴＡＮＤＡＲＤ  ▄▄
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＡＰＰＬＩＣＡＴＩＯＮ  ▄▄
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＡＰＰＬＩＣＡＴＩＯＮ ＣＯＯＲＤ  ▄▄
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＡＰＰＬＩＣＡＴＩＯＮ ＭＡＲＳＨ  ▄▄
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＡＰＰＬＩＣＡＴＩＯＮ ＰＲＯＧ  ▄▄
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＴＥＭＰＬＡＴＥ  ▄▄
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＤＯＣＵＭＥＮＴＡＴＩＯＮ  ▄▄
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ＩＮＴＥＲＲＵＰＴ  ▄▄

[Additional references]
▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
1.1      Additional document references


In addition to the documents referenced in the OB1 section DOCUMENT REFERENCES, the 
following documents are associated with this module:
↳
↳
 ――――――――――――――――――――――――――――――――――――――――――
 REF.     DOCUMENT NO.       TITLE
 ――――――――――――――――――――――――――――――――――――――――――
 101  PS2001-5-2331-001-01   FC19512 Calculation Sheet
 102  PS2001-5-2331-001-02   FC19512 2nd Order Response Simulation Spreadsheet
 ――――――――――――――――――――――――――――――――――――――――――
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━

[Additional references - alternative text]

There are no additional document references for this module, any document references made
herein are listed in OB1 in the section DOCUMENT REFERENCES.

               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━




Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut 
labore et dolore magna aliqua. Euismod lacinia at quis risus sed. Semper feugiat nibh sed 
pulvinar proin gravida hendrerit.
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━[1 empty line above]
↳
↳
↳
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄[3 empty lines above, 2 after title]
1.     [MAIN SECTION — ALL UPPERCASE — IF UNNUMBERED STARTS AT LEFT EDGE]
10.     [MAIN SECTION — ALL UPPERCASE — IF UNNUMBERED STARTS AT LEFT EDGE]
↳
↳
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut 
labore et dolore magna aliqua. Euismod lacinia at quis risus sed. Semper feugiat nibh sed 
pulvinar proin gravida hendrerit.
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━[1 empty line above]
↳
↳
↳
▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂[3 empty lines above, 2 after title]
1.1     [Subsection, two single digits   — Sentence case — if unnumbered, starts at left edge]
10.1   [Subsection, one double digit   — Sentence case — if unnumbered, starts at left edge]
10.10    [Subsection, two double digits — Sentence case — if unnumbered, starts at left edge]
↳
↳
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut 
labore et dolore magna aliqua. Euismod lacinia at quis risus sed. Semper feugiat nibh sed 
pulvinar proin gravida hendrerit.
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━[1 empty line above]
↳
↳
↳
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁[3 empty lines above, 2 after title]
1.1.1     [Inline, three single digits   — Sentence case — if unnumbered, starts at left edge]
10.1.1   [Inline, one double digit   — Sentence case — if unnumbered, starts at left edge]
10.10.1   [Inline, two double digits    — Sentence case — if unnumbered, starts at left edge]
10.10.10 [Inline, three double digits — Sentence case — if unnumbered, starts at left edge]
↳
↳
   •   [Lists — non-numbered]
   ① [Lists — numbered]
   1.  [Lists — numbered single digit   — less than 10 entries]
     1.  [Lists — numbered single digit   — 10 or more entries]
   10.  [Lists — numbered double digit — 10 or more entries]

   1.  Communication handling
     Executes system to system communications (Controller to Controller, point-to-point,
     ProfiBus FMS &amp;c.)
   2.  Subroutine functions
     Various subroutines (called by other block) to execute particular functions 
     (subroutines are organised into similar function areas)
   3.  Normal (non-error) interrupt functions
     Usually associated with specific OBs, interrupts generated by standard system events
     (time of day, cyclic, hardware &amp;c.)

Note:    Bipolar and unipolar instruments have different tolerances, a 0-20 mA unipolar signal
     has a full instrument range of 16 mA and the 2.5% tolerance will thus be ±0.4 mA 
↳
――――――――――
¹         Footnotes can use the characters ¹, ² and ³ to indicate the footnote number
     Second lines are identical to those for notes.
――――――――――
↳
↳
[Emphasised note]
████████████████████████████████████████████
█                                          █
█ Note:   FC61000 should not be present in any final software generated with the PAL.    █
█                                          █
█     It is intended, purely as a development tool that makes the documenting      █
█     of software modules easier.                          █
█                                          █
████████████████████████████████████████████
↳
[Emphasised text]
████████████████████████████████████████████
█                                          █
█    This block is essential to the operation of all other PAL software and it must       █
█    be the first block call within the main cyclic organisation block (OB 1).         █
█                                          █
█    It must be called before all other PAL software modules (excepting any       █
█    start-of-cycle debug modules).                         █
█                                          █
████████████████████████████████████████████
↳


TEST PATH ELEMENTS AND CONSTRUCTION

    SMT  █    ＿＿＿＿＿＿＿＿＿＿＿＿＿＿
＿ ▛▜ ＿█       [Each area is 14 em spaces]   
  ▙▟  █    ▀▄▀▄▀▄▀▄▀▄▀▄▀▄
         
  SCV    █
＿╓╖＿█
 ╙╜ █

  SCR  █
＿┌┐＿█
 └┘ █
▀▄▀▄

        FC61000-T001         FC61000-T002

    Test version: 000.801     Test version: 001.801
 Released version: 001.000     Released version: 002.000
Released commit: D0002    Released commit: D0011
▄＿＿＿＿＿＿＿＿＿＿＿＿＿▄＿＿＿＿＿＿＿＿＿＿＿＿＿
[Each area is 14 em spaces]




        FC61000-T001         FC61000-T002
↳
    Test version: 000.801     Test version: 001.801
 Released version: 001.000     Released version: 002.000
Released commit: D0002    Released commit: D0011
↳
       SCR      SMT              SCV     
＿＿＿＿＿＿┌┐＿＿ ▛▜ ＿＿＿＿＿＿＿＿＿＿＿＿╓╖＿＿
      └┘   ▙▟             ╙╜  
Initial test           Comment update
↳
Initial test to release the      Comments updated &amp; 
module following the      expanded. Empty networks 
development stage.       added.
Full SMTS            Full SMTS
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━
↳
↳
██████████████ █ █ █ █  END   █ █ █ █ ██████████████
↳</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="2E" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="2F" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Example — Headings, lists and indented text</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="30" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="31" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="32" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

TITLE:    BODY TEXT (AN EXAMPLE)

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


Normal (body) text is left justified to the left hand edge of the comment area; manual line-breaks
must be inserted when the text exceeds the range of the title bars (lines at the top of this block
and above each section and subsection — exactly 44 em-spaces).

Note:    Under certain circumstances this range (44 em-spaces) can be exceeded. This is
     usually for equations, figures and tables. It should not, however, be exceeded 
     without careful consideration (if in doubt, don't do it).

The following fragment highlights this44 em-space range: 

The alignments in Figure 7.4 are such that the leading edge (left side) of any indented character
is aligned with the leading edge of an em-space in a line of em-spaces that span the page (this
can be seen with the chequered patterns in the screen shot — all indents line up with the left
edge of an em-space).

The problem with this is that the alphanumeric characters are not all the same width and
generally, they are not one em-space wide (there are no characters that are one em wide, not
even the M, which is odd given that that is how the em unit was derived, see here).
With the TIA Portal font, one em is exactly the same width as four normal space characters (a 
normal space being the character entered when the space bar is pressed). The alphanumeric 
characters (and in fact, all the characters) in the TIA Portal font have the peculiarity that they are
all a multiple of ⅓ of a normal space , the “i" for example is one normal space wide, “a” is 2⅓
normal space characters wide and “m” is 2⅔ normal space characters wide.

This “feature?” of the font is a distinct advantage; it means that is possible to always bring things
back into true alignment by using the range of whitespace characters. There are five such 
whitespace characters.

The width of the page is approximately 3.38 lowercase alphabets:

abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij

This averages at about 78 (non-space) characters per line.

A comment field can contain 65000 characters (approx.) including spaces and line breaks.

This broadly equates to 670 lines of standard text, approximately 13000 words.
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━
↳
↳
██████████████ █ █ █ █  END   █ █ █ █ ██████████████
↳</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="33" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="34" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Example — Body text</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="35" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="36" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="37" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

TITLE:    STANDARD TABLES (EXAMPLES)

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄



Tables always have 2 blank lines above and 2 blank lines below.

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌PARAMETER TABLE▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐
↳
↳
 ――――――――――――――――――――――――――――――――――――――――――
 PARAM         FUNCTION                    TYPE      IN-OUT 
 ――――――――――――――――――――――――――――――――――――――――――
 SYS_SIGNALS      Common system signals              UT21000    In
          logic and timing signals for parametric access


 RAW_ANALOG      The unscaled analogue input (input word         Word     In
          address for the IO card to which the instrument 
          is connected)

 RAW_MIN     Minimum value of the analogue input range      Int      In
          (see Table 3.1 to Table 3.3 for typical values)

 RAW_MAX       Maximum value of the analogue input range      Int      In
          (see Table 3.1 to Table 3.3 for typical values)

 SCALE_MIN    Calibrated lower value of the instrument       Real      In
          range in engineering units

 SCALE_MAX      Calibrated upper value of the instrument      Real      In
          range in engineering units

 STATIC_DATA     Data structure that holds the configuration data     UT11001    In
          for the module (configurations, constants 
          timing values, ranges &amp;c.)

 DYNAMIC_DATA      Data structure that holds the live data for the       UT31001    InOut
          module (its mode, status and messages and 
          any other dynamic information required by the 
          module)

 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌ DATA STRUCTURE LIST ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐
↳
↳
 ――――――――――――――――――――――――――――――――――――――――――
 DATA STRUCTURE             DESCRIPTION
 ――――――――――――――――――――――――――――――――――――――――――
 UT01000_St_SysRevision          Revision information for this block    See FC01000
 UT01001_St_SysLicence           Licence information for this block  See FC01000
 UT21000_Dy_SysSignals           System signals for logic and timing  See FC01000

 UT02001_St_InstAnalogRead      Static data structure for an analogue instrument.
                    Holds configuration information, instrument ranges 
                    and scaling, alarm/warning thresholds &amp;c.

 UT22001_Dy_InstAnalogRead        Dynamic data structure for an analogue instrument.
                    Current scaled instrument reading, alarm status, 
                    operating modes, timer values &amp;c.
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌   DATA STRUCTURE CONTENTS AND INSTANCE DBs   ▐▐▐▐▐▐▐▐▐▐
↳
↳
 UT11001_St_DevValveIsol (full contents)
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME          FUNCTION                     TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 CONFIG_NO_NC        CONFIG — Normally open or normally closed valve     Bool
                     (1 = normally open, 0 = normally closed)
 CONFIG_FBK_OPEN_EN    CONFIG — Open feedback is enabled        Bool
                     (1 = open feedback, 0 = no feedback)
 CONFIG_FBK_CLOSED_EN   CONFIG — Closed feedback is enabled         Bool
                     (1 = closed feedback, 0 = no feedback)
 CONFIG_ESTOP_DIS     CONFIG — E_STOP signal disabled           Bool
                     (1 = E_STOP not used, 0 = in use)
 CONFIG_TRIP_DIS      CONFIG — TRIP signal disabled           Bool
                     (1 = TRIP not used, 0 = in use)
 CONFIG_ILOCK_DIS     CONFIG — INTERLOCK signal disabled        Bool
                     (1 = INTERLOCK not used, 0 = in use)
 CONFIG_PERM_DIS      CONFIG — PERMISSIVE signal disabled         Bool
                     (1 = PERMISSIVE not used, 0 = in use)
 CONFIG_TRIP_OP_CL       CONFIG — TRIP state                  Bool
                     (1 = open, 0 = close)
 CONFIG_ILOCK_OP_CL      CONFIG — INTERLOCK state              Bool
                     (1 = open, 0 = close)
 CONFIG_PERM_OP_CL       CONFIG — PERMISSIVE permitted state         Bool
                     (1 = open, 0 = closed)
 CONFIG_FP_DIS               CONFIG — Faceplate is disabled           Bool
                     (1 = no Faceplate, 0 = normal)
 CONFIG_MAN_DIS              CONFIG — Manual mode is disabled          Bool
                     (1 = no manual mode, 0 = normal)
 CONFIG_BYPASS_DIS     CONFIG — Bypass mode is disabled           Bool
                     (1 = no bypass mode, 0 = normal)
 CONFIG_SIM_DIS             CONFIG — Simulation is disabled            Bool
                     (1 = no simulation, 0 = normal)
 CONFIG_RL_EN       CONFIG — Remote/local mode enabled       Bool
                     (1 = enabled, 0 = all mode)

 INFO_TAG          INFORMATION — Instrument ID tag          String[20]

 TIME_OPENING_MAX    TIMER — Initial value of opening operation timer      Real
                     (counts down from this value), [seconds]
 TIME_CLOSING_MAX       TIMER — Initial value of closing operation timer     Real
                     (counts down from this value), [seconds]
 TIME_DER_OPEN              TIMER — Percentage of opening timer to expired      Real
                     before simulating FBK_OPEN, [percent]
 TIME_DER_CLOSED            TIMER — Percentage of closing timer to expired        Real
                     before simulating FBK_CLOSED, [percent]
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳
 UT31001_Dy_DevValveIsol (full contents)
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME          FUNCTION                     TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 status_Closed        STATUS — Valve is confirmed closed          Bool
                     (1 = closed, 0 = not closed)
 status_Open        STATUS — Valve is confirmed open         Bool
                     (1 = open, 0 = not open)
 status_Closing       STATUS — Valve is closing             Bool
                     (1 = closing, 0 = not closing)
 status_Opening        STATUS — Valve is opening              Bool
                     (1 = opening, 0 = not opening)
 status_Operating        STATUS — Valve is changing state           Bool
                     (1 = changing state, 0 = fixed state)
 status_Fault            STATUS — Valve is in fault              Bool
                     (1 = fault present, 0 = healthy)
 status_Energised        STATUS — Valve output is on              Bool
                     (1 = energised, 0 = deenergised)
 status_Aut           STATUS — Automatic mode active           Bool
                     (1 = auto mode on, 0 = auto mode off)
 status_Man          STATUS — Manual mode active             Bool
                     (1 = man mode on, 0 = man mode off)
 status_EStop          STATUS — E_STOP safety signal is active         Bool
                     (1 = active, 0 = healthy)
 status_Trip        STATUS — TRIP signal is active             Bool
                     (1 = active, 0 = healthy)
 status_Ilock         STATUS — INTERLOCK signal is active            Bool
                     (1 = active, 0 = healthy)
 status_Perm        STATUS — PERMISSIVE signal is active           Bool
                     (1 = active, 0 = healthy)
 status_BypassOn        STATUS — Valve is in bypass mode          Bool
                     (1 = Simulation mode, 0 = normal)
 status_SimOn           STATUS — Valve is in simulation mode               Bool
                     (1 = Simulation mode, 0 = normal)
 status_RemoteOn       STATUS — Valve is in remote mode                  Bool
                     (1 = Remote mode, 0 = normal)
 status_LocalOn         STATUS — Valve is in local mode                    Bool
                     (1 = Local mode, 0 = normal)
 status_RLOff         STATUS — Valve is in ALL mode                   Bool
                     (1 = ALL mode, 0 = normal)

 msg_FailToOpen       MESSAGE — Alarm – “Fail to open” is active         Bool
 msg_FailToClose       MESSAGE — Alarm – “Fail to close” is active        Bool
 msg_FailWhileOpen    MESSAGE — Alarm – “Fail while open” is active      Bool
 msg_FailWhileClosed     MESSAGE — Alarm – “Fail while closed” is active   Bool
 msg_Flt_External         MESSAGE — Alarm – “external fault" is active      Bool

 mode_AutMan        MODE — Automatic or manual mode selection     Bool
                   (1 = auto mode active, 0 = man mode)
 mode_BypassOn      MODE — Bypass mode                Bool
                   (1 = bypass mode active, 0 = normal)
 mode_SimOn         MODE — Simulation mode               Bool
                   (1 = sim mode active, 0 = normal)
 mode_SimValue       MODE — Simulation value               Int
                   (0 = no limits, 1 = always open, 
                   2 = always closed, 3 = follow demand)
 mode_RemoteOn        MODE — Remote SCADA control enabled       Bool
                   (1 = active, 0 = disabled or N/A)
 mode_LocalOn         MODE — Local HMI control enabled           Bool
                   (1 = active, 0 = disabled or N/A)
 mode_Reset        MODE — Fault reset – 1 cycle only           Bool
                   (1 = Reset faults, 0 = does nothing)
 ctrl_Aut_OpenClose       CONTROL — Auto mode open or close valve     Bool
                         (1 = open valve , 0 = close valve)
 ctrl_Man_OpenClose      CONTROL — Manual mode open or close valve   Bool
                         (1 = open valve , 0 = close valve)

 batch_ID         BATCH — Booking ID (optional for batch operations)   UInt

 actual_Operating_Timer     ACTUAL — Timer value — operating opening/closing  Real
                     timer actual value [seconds]
 actual_Last_Op_Time       ACTUAL — actual time taken to achieve the last    Real
                     good valve position [seconds]

 $derived_fbk_open     INTERNAL — Derived feedback open signal       Bool
                         (1 = open , 0 = not open)
 $derived_fbk_closed      INTERNAL — Derived feedback closed signal        Bool
                         (1 = closed, 0 = not closed)
 $sim_fbk_open         INTERNAL — Simulated feedback open signal         Bool
                         (1 = open , 0 = not open)
 $sim_fbk_closed          INTERNAL — Simulated feedback closed signal      Bool
                         (1 = closed, 0 = not closed)
 $ctrl_OpenClose       INTERNAL — actual open or close request,         Bool
                         incorporates all priorities
                        (1 = open valve, 0 = close valve)
 $pret_Open             INTERNAL — Edge retention (+ve) rising edge of    Bool
                         ctrl_OpenClose (change to opening)
 $nret_Close            INTERNAL — Edge retention (-ve) falling edge of        Bool
                         ctrl_OpenClose (change to closing)
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌  CONSTANTS AND LOCAL DATA  ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐

[Keep local and constant data function description to one line and no gaps between rows]
↳
↳
 CONSTANTS DATA
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME       Value    FUNCTION                   TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 k_TIME_OP_MIN      0.21      Minimum value for the operation timer      Real
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳
 TEMPORARY (LOCAL) DATA
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL NAME          FUNCTION                     TYPE
 ――――――――――――――――――――――――――――――――――――――――――
 wrkPercentPV          Process Variable as a percentage of inst. range     Real
 revInfo             Revision information for the block            UT01000
 licInfo           Licensing information for the block         UT01001
 actual_CPUTime        Current CPU time (this block call)          DTL
 wrk_DampFactor      Adjusted (working) damping factor         Real
 wrk_ElapsedTime        Working storage area (current elapsed time)       LTIme
 wrkPercentPV          Process Variable as a percentage of inst. range     Real
 wrkPercentSP          Setpoint as a percentage of PV instrument range     Real
 wrkPercentDB         Deadband as a percentage of PV instrument range    Real
 wrkGain          Gain (adjusted for reverse/normal Acting)      Real
 wrkCycTime          Cyclic execution time (TIME format)         Time
 wrkInt           Working storage area (integer)             Int
 wrkDInt           Working storage area (double integer)            DInt
 wrkLInt            Working storage area (long integer)           ULInt
 wrkLTime           Working storage area (long time)            LTime
 wrkDTL            Working storage area (DateTime long)         DTL
 wrkReal           Working storage (Real)                Real
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌  BLOCK LIST  ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐
↳
↳
 BLOCK CALLS
 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK          TITLE             DESCRIPTION  
 ――――――――――――――――――――――――――――――――――――――――――
 FC18001         StdSubScaleAI        Scales an analogue input signal 
                           Continuation line
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳
 ASSOCIATED BLOCKS
 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK          TITLE             DESCRIPTION  
 ――――――――――――――――――――――――――――――――――――――――――
 FC17102         StdCommsWrite65K       Write data partner block
                           Continuation line 
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌  SYSTEM BLOCK LIST   ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐
↳
↳
 SYSTEM BLOCK CALLS
 ――――――――――――――――――――――――――――――――――――――――――
 BLOCK          TITLE             DESCRIPTION  
 ――――――――――――――――――――――――――――――――――――――――――
 RD_LOC_T             Read the local RTC time    Reads the CPU real time clock 
 (FC804)                        Continuation line 
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━
↳
↳
██████████████ █ █ █ █  END   █ █ █ █ ██████████████
↳</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="38" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="39" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Example — Standard Tables</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="3A" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="3B" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="3C" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

TITLE:    OTHER TABLES (EXAMPLES)

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄



Tables always have 2 blank lines above and 2 blank lines below.


▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌  TWO COLUMN TABLE ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐
↳
↳
 ――――――――――――――――――――――――――――――――――――――――――
 IO TYPE            DESCRIPTION
 ――――――――――――――――――――――――――――――――――――――――――
 ET200MP         Standard IO high density IO for the S7-1500 range

 ET200M           Standard IO high density IO for the S7-300 range, 
              can be used as remote IO for the S7-1500
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌THREE COLUMN TABLE ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐

[Numerical table with number alignment to the right]
↳
↳
 ――――――――――――――――――――――――――――――――――――――――――
 PRESSURE           RAW SIGNAL           SCALED VAL
 ――――――――――――――――――――――――――――――――――――――――――
 -250.0 Pa                   0             -250.0 Pa
       0.0 Pa                  13824            0.0 Pa
  250.0 Pa                  27648              250.0 Pa
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌ FOUR COLUMN TABLE ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐

[Numerical table with number alignment to the right]
↳
↳
 ――――――――――――――――――――――――――――――――――――――――――
 RAW MIN       RAW MAX      SCALED MIN       SCALED MAX
 ――――――――――――――――――――――――――――――――――――――――――
       0        27648        -250.0 Pa        250.0 Pa
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌  TABLE WITH HEADING  ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐

[Numerical table with number alignment to the right]
↳
↳
 CURRENT SIGNALS
 ――――――――――――――――――――――――――――――――――――――――――
 SIGNAL TYPE     SIG MIN VAL      RAW_MIN     SIG MAX VAL     RAW_MAX
 ――――――――――――――――――――――――――――――――――――――――――
   4-20 mA      4 mA          0          20 mA       27648
   0-20 mA      0 mA          0          20 mA       27648
 -20 to 20 mA      -20 mA      -27648          20 mA       27648
 ――――――――――――――――――――――――――――――――――――――――――
↳
↳

▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━
↳
↳
██████████████ █ █ █ █  END   █ █ █ █ ██████████████
↳</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="3D" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="3E" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Example — Other tables</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="3F" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="40" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="41" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

TITLE:    EQUATIONS (EXAMPLES)

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄



Equations are generally placed in boxes

┌─────────────────────────────────────┐
│                                                                                                              100                         │
│ SigPercent = (Signal ─ PV_RANGE_MIN) ╳ ---------------------------------------------------------------    │
│                    (PV_RANGE_MAX ─ PV_RANGE_MIN)    │
└─────────────────────────────────────┘


┌───────────────────────┐
│        2.5               │
│ CalcValOOR = ------------ ╳ (RAW_MAX ─ RAW_MIN)   │
│       100               │
└───────────────────────┘

Equations can also be directly used in the body text:

The response of a second order system (y) to an input (x) is defined using the general form of a 
second order system transfer function, this is expressed below in the time domain as a second 
order differential equation (see the calculation sheet [Ref. 101], Appendix B for details):

 d²y                dy
 ------  ┼  2ζω ----- ┼  ω²y  =  Kω² x
 dt²                dt

Where:    K is the system gain
     ω is the natural frequency of the system (rad/s)
     ζ is the damping factor


Where complex or extensive equations are used, the boundary limits within the comment field 
can be exceeded:

CALCULATION:

        ╓   1 ┌   ζ       ┐   - ω [ ζ ─ √(ζ² ─ 1) ]t       1 ┌   ζ       ┐   - ω [ ζ ┼ √(ζ² ─ 1) ]t ╖
y = x K║1 ─ -- │------------------ ┼ 1│ｅ         ┼ -- │------------------ ─ 1│ｅ           ║
     ╙   2 └ √(ζ² ─ 1)     ┘            2 └ √(ζ² ─ 1)     ┘            ╜



Mathematical operators:
   Large:  ┼ ─ ╳
   Small: + − × ÷ ± ≤ ≥
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━
↳
↳
██████████████ █ █ █ █  END   █ █ █ █ ██████████████
↳</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="42" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="43" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Example — Equations</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="44" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="45" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="46" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

TITLE:    FIGURES (EXAMPLES)

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄



Some example figures, always pad gaps with an EM-SPACE, where text is used add normal 
spaces with either a THREE-PER-EM space or a SIX-PER-EM space — one of these will give an
exact alignment.

These figures are included to show what is possible.


Figures have 1 blank line above and 1 below.

  → ┌────────┐
┌───┤   IDLE   │
│   └───┬────┘
│       ↓
│       START
│       │
│   ┌───┴────┐ →
│   │  STARTING     ├───┐
│   └───┬────┘   │
│       ↓        │
│         Run*       ├────────────────────┐
│       │        │                    │
│   ┌───┴────┐ → │                    │
│   │        ├───┴───  Hold  ───┐          │
│   │        │             ↓          ↓
│   │        │         ┌───┴────┐ ┌───┴────┐
│   │        │         │  HOLDING    │ │ ErrHOLDING   │
│   │        │         └───┬────┘ └───┬────┘
│   │        │             Held*        ErrHeld*
│   │        │         ┌───┴────┐ ┌───┴────┐
│   │        │         │   HELD    │ │  ErrHELD   │
│   │  RUNNING     │         └───┬────┘ └───┬────┘
│   │        │              Resume         ErrResume
│   │        │         ┌───┴────┐ ┌───┴────┐
│  ┌┤        │         │   RESUMING    │ │  ErrRESUMING   │ 
│  ││        │         └───┬────┘ └───┬────┘  
│  ││        │             │          │
│  ││        │ ←           ↓          ↓
│  ││        │─────────────┴──────────┘
│  │└───┬────┘   Returns to previous step (running or starting)
│  ↓    ↓
│  │    │
│ Complete Complete*     Note: *indicates that the command is issued
│  │    │           automatically by the sequence (it
│  │┌───┴────┐      can also be triggered manually):
│  └┤ COMPLETING  │          1. Run
│   └───┬────┘          2. Complete
│       ↓               3. Completed
↑     Completed*              4. Held
│       │               5. ErrHeld
│   ┌───┴────┐          6. Stopped
│   │  COMPLETED   │          7. Aborted
│   └───┬────┘
│       │
│              RetIdle*
│   ←   ↓
├───────┘
│   
│
│     ABORT ROUTE                  STOPPING ROUTE
│Can be triggered in all states except       Can be triggered in all states except
│ IDLE, COMPLETED, ABORTING or            IDLE, COMPLETED, ABORTING, 
│       ABORTED                 ABORTED, STOPPING or STOPPED
│       │                       │
│       ↓                       ↓
│                Abort                                                                                       Stop
│       │                       │
│   ┌───┴────┐              ┌───┴────┐
↑   │ ABORTING    │              │  STOPPING    │
│   └───┬────┘              └───┬────┘
│       ↓                       ↓
│              Aborted*                                                                                Stopped*
│       │                       │
│   ┌───┴────┐              ┌───┴────┐
│   │ ABORTED      │              │ STOPPED   │
│   └───┬────┘              └───┬────┘
│       │                       │
│      RetIdle (*)                                                                               RetIdle (*)
│  ←    ↓                       ↓
└───────┴───────────────────────┘



▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌   INLINE FIGURES ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐



▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
1.1     Step operation and phases


 ┌─────┐  The sequence progresses from one step to the next if the
 │Step n        │  transition logic for the step is TRUE. 
 └┬────┘                                                                 
  │       In this example, STEP n is active and will remain active
        --- T n        until its associated transition (T n) becomes TRUE; at this
  │       point the sequence will advance to the next step (STEP n+1)
 ┌┴────┐  and execute the actions required of this step. The sequence
 │Step n+1    │  will remain in this step until its transition condition is
 └┬────┘  true, at which point the sequence will advance again.
  │                                                                      
        --- T n+1      Each step has a step number, this is an integer value in
  │       the range 0 to 29999; step numbers are assigned in specific
          Ranges for different operating states of the sequence (IDLE,
          STARTING, RUNNING &amp;c.).

Within an individual step, the step has three distinct phases and actions can 
be attached to any of these phases (externally to the block). The phases are:

INITIALISING (Phs_INIT)                   ┌──────┐
This is activated for a single OB1 scan when the step   │INITIALISING   │
is first processed (I.e. on the rising edge of the step     └┬─────┘
becoming active).                     │      
                          ┌┴─────┐ 
PROCESSING (Phs_PROC)               │PROCESSING │
This is the main phase of the step, it is activated        └┬─────┘
immediately following the INITIALISING phase and remains  │       
active until the step TRANSITION condition is TRUE. The     --- T n   
PROCESSING phase becomes inactive on the rising edge   │     
of the TRANSITION condition.              ┌┴─────┐
                          │TERMINATING │    
TERMINATING (Phs_TERM)               └──────┘    
The TERMINATING phase is activated on the rising edge of the TRANSITION
condition (the same condition that terminates the PROCESSING phase). The
terminating phase is active for a single OB1 scan.


[ALTERNATIVE]
 ┌──────┐ INITIALISING (Phs_INIT)
 │INITIALISING   │ This is activated for a single OB1 scan when the step
 └┬─────┘ is first processed (I.e. on the rising edge of the step
  │       becoming active).
 ┌┴─────┐    
 │PROCESSING │ PROCESSING (Phs_PROC)
 └┬─────┘ This is the main phase of the step, it is activated 
  │       immediately following the INITIALISING phase and remains
         --- T n       active until the step TRANSITION condition is TRUE. The
  │       PROCESSING phase becomes inactive on the rising edge
 ┌┴─────┐ of the TRANSITION condition.
 │TERMINATING │    
 └──────┘

TERMINATING (Phs_TERM)
The TERMINATING phase is activated on the rising edge of the TRANSITION
condition (the same condition that terminates the PROCESSING phase). The
terminating phase is active for a single OB1 scan.




▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌   GRAPHICAL FIGURE   ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐

    No. of scans from start of STEP 1
    1      2      3     4      5     6       7      8      9
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼  ─ ─ ┐
                               │
  ┌─┐                          │
  │ │               Phs_INIT
 ─┘ └────────────────────                   
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼                   
 
    ┌───┐                       S
    │   │           Phs_PROC      T
 ───┘   └────────────────       E
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼       P
 
        ┌─┐                     1
        │ │         TRANSITION
 ───────┘ └──────────────
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼

        ┌─┐
        │ │         Phs_TERM      │
 ───────┘ └──────────────      │
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼  ─ ─ ┘


    1      2      3     4      5     6       7      8      9
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼  ─ ─ ┐
                               │
          ┌─┐                  │
          │ │       Phs_INIT
  ────────┘ └────────────                   
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼                   

            ┌───┐               S
            │   │   Phs_PROC      T
 ───────────┘   └────────       E
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼       P
                          
                ┌─┐             2
                │ │ TRANSITION
 ───────────────┘ └──────      
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼

                ┌─┐
                │ │ Phs_TERM      │
 ───────────────┘ └──────      │
  ┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼  ─ ─ ┘


 ――――――――――――――――――――――――――――――――――――――――――


                     jω
                    ↑
                    │
                    │
       UNDER DAMPED         │
                 ╲     │
                ╲   │
                    ↘  │
                    ⊙ - - │ω √(1 ─ ζ²)
                    ╎  │
                    ╎  │
                    ╎  │        ⊠        UNSTABLE 
                    ╎  │     ╎       OVER DAMPED 
                    ╎  │     ╎         ╎ ╎
                    ╎  ∅──┐      ╎         ╎ ╎
                    ╎  │      ❘        ╎         ↓ ↓
─ ⊕ ⊕ ──────── ⊗ ────  -ζω ─┿───────────────⊞ ⊞─── σ
  ↑ ↑            ↑     ╎  │      ❘        ╎
  ╎ ╎            ╎     ╎  ∅──┤      ╎
  ╎ ╎            ╎     ╎  │      ❘        ╎
  ╎ ╎      CRITICALLY DAMPED    ╎     │      ❘       ⊠
  ╎ ╎                  ╎  │      ❘    ↖
  ╎ ╎                  ╎  │      ❘      ╲
OVER DAMPED               ╎  │      ❘          ╲
                    ⊙     │      ❘        UNSTABLE UNDER  DAMPED
                    │      ❘ 
                    │ UNDAMPED
                    │
                    │
                    │


 ――――――――――――――――――――――――――――――――――――――――――


                │
                │          ╱╲╱╲
                │    ①      ②╱    ╲
      SP_ALM_H_VAL↘│____╱╲________╱____________╲③_______④__________ 
   SP_ALM_H_HYST_VAL ↕│__╱____╲____╱╎_____╎_______╲____╱╲___________
                │╱    ╲╱ ╎    ╎      ╲╱     ╲
                │        ╎    ╎          ╎╲
                │        ╎    ╎          ╎ ╲___
                │        ╎    ╎          ╎    ╎╲╱
                │    ON_DEL→╎    ╎←    OFF_DEL→╎    ╎←
                ┼─────────────────────────────

                           ╎                        ╎

        msg_Alm_H │             ┏━━━━━━━━━━━━┓
                │             ┃               ┃
CONFIG_ALM_H_ENABLE = 1  │             ┃   ALARM IS ACTIVE    ┃
&amp; mode_Alm_H_MaskOn = 0 │             ┃               ┃
                │             ┃               ┃
                ┼━━━━━━━━━━━━╶╶╶╶╶╶╶╶╶╶╶╶╶━━━━

                           ╎                        ╎

        msg_Alm_H │          
⑤               │             ╎               ╎             
CONFIG_ALM_H_ENABLE = 0  │             
    OR          │             ╎               ╎
CONFIG_ALM_H_ENABLE = 1  │          
&amp; mode_Alm_H_MaskOn = 1 ┼━━━━━━━━━━━━━━━━━━━━━━━━━━━━━






▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌      BRAILLE    ▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐

More complex figures can be created using Braille characters, these are generated by the 
following web site:      https://505e06b2.github.io/Image-to-Braille
(the images are 100 braille characters wide).

             Graph shown has values: ζ = 0.3    ω = 6π = 18.8 (rad/s) giving:   Ω = 17.9 (rad/s)  

│⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⡴⠒⠲⣄─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─  ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⡞⠄╎ ⠘⢧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄↑ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⡼⠁⠄╎ ⠄⠈⢧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢰⠇⠄⠄╎ ⠄⠄⠘⣇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⡞⠄⠄⠄╎ ⠄⠄⠄⠸⡆⠄⠄⠄ Oscillation period (Td) ⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎Peak value (Ypk) ⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢸⠇⠄⠄⠄╎╌ ╌ ⢹⡄ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎(% of  steady state)
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⡾⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⢳⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⢠⡇⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠈⢧⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⠁⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠘⣇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⣠⠴⠒⠛⠋⠛⠛⠓⠲⠤⣄⣀⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄↓ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
K─ ─ ─ ─    ⡟ ─ ─  ╎  ─ ─ ─ ⠘⣆─ ─ ─ ─ ─ ─ ⣀⡴⠋⠁  ─ ─ ─ ─   ⠈⠉⠓⠲⠦⢤⣄⣀⣀⣀⣀⣀⣀⣠⣤⠤⠤⠴⠶⠖⠒⠒⠒⠛⠛⠛⠛⠛⠓⠒⠒⠒⠒⠒⠲⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶
│⠄⠄⠄⠄⠄⠄⠄⠄⢸⡇⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠘⣆⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣠⠞⠁⠄⠄⠄⠄⠄⠄⠄⠄⣀⢀⡀⡄⠤⠠⠄⠄⠂⠂⠂⠂⠒⠄⠁⠁⠁⠄⠄⠄⠄╎─ ─ ─  TSS = 98% of steady state  ⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⣸⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⢧⡀⠄⠄⠄⠄⠄⠄⣠⠞⠁⢀⢀⠠⠄⠄⠒⠐⠉⠈⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⠄⡟⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠙⠦⣤⣀⡤⡴⡫⠑⠐⠁⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⢰⡇⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⠠⠐⠐⠉⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⢸⠁⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⡀⠤⠊⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⠄⡿⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⢀⠔⠈⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⢠⡇⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⡠⠂⠁↖ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⢸⠃⠄⠄⠄⠄⠄⠄⠄╎ ⠄⡠⠊⠄⠄⠄⠄⠄╲ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⠄⣾⠄⠄⠄⠄⠄⠄⠄⠄⠄⢠⠊⠄⠄⠄⠄⠄⠄⠄⠄⠄DECAY ENVELOPE ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⢀⡇⠄⠄⠄⠄⠄⠄⠄⢀⠔⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⢸⠇⠄⠄⠄⠄⠄⠄⡠⠊╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⣸⠄⠄⠄⠄⠄⠄⡔⠁⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⠄⡟⠄⠄⠄⠄⢀⠎⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⢰⡇⠄⠄⠄⢠⠊⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⢸⠃⠄⠄⠠⠃⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⠄⣾⠄⠄⠠⠃⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⢀⡇⠄⠠⠅⠄⠄⠄⠄⠄⠄⠄╎ Time to peak (Tpk)  ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⢸⠃⢀⠇⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⠄⡾⢀⡊⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⢠⡇⠔⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⠄⣸⡩⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⢀⣟⠂⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⠄⡸⠂⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
│⣰⠋⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄╎ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼ ─ ─ ─ ─ ┼
0.0     0.1      0.2      0.3      0.4      0.5      0.6      0.7      0.8      0.9      1.0 s


Note:
   •   A lower damping factor  ζ gives a faster response and higher frequency
   •   A higher natural frequency ω gives a faster response and higher frequency





         ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣶⣿⣿⣿⣿⣿⣿⣤
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣿⣿⣤⠉⠿⣿⣿⣿⣿⣿⠿⠛⣤⣶
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⣿⣿⣿⣿⣿⣶⣤⠉⠉⠉⠀⠤⣿⣿⣿⣿⣶⣀⣀⣀⣀⣀⣀⣀⣀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⠀⠀⠀⠀⠀⠉⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣤
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⣿⣿⣶⣶⣤⠉⠿⣿⣿⣿⣿⣿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⠉⠀⠀⠀⠀⠀⠉⣿⣿⣤
      ⠀⠀⠀⠀⠀⠀⠀⣀⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⠉⣿⣿⣿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠿⠿
      ⠀⠀⠀⠀⠀⠀⣀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿
      ⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣤
      ⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣿
      ⠀⠀⠀⠀⠀⠀⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
      ⠀⠀⠀⠀⠀⠀⠀⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠉
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠿⣿⣿⣿⣿⣿⣿⣿⠿⠉
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣉⣉⣉⣉⣉⣀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⣿⣿⣿⣿⣿⣿⣀⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⣤⣿⣿⣿⠿⠉⠉⣿⣿⣿⣿⣤⠉⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⣶⣿⣿⣿⠛⠀⠀   ⠀⠀⠿⣿⣿⣿⣤⠀⠀⠀⠀⠀⠀⣶⣶⣶⣶⣤⠀⠀⠀⠀ ⣶⣶⣶         ⣶⣶⠀⠀⠀⠀⠀⠿⣿⣿⣿⣿⣶⠀
      ⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⠛⠀⠀⠀⠀   ⠀⠀⠛⣿⣿⣿⣶⠀⠀⠀⠀⠀⣿⣿⣿⠿⣿⣿⠀⠀⣤⣿⣿⣿⣤       ⣿⣿⠀⠀⠀⠀⠀⠀ ⠿⣿⣿⣿⣿⣤
      ⠀⠀⠀⠀⠀⣿⣿⣿⣿⠉⠀⠀⠀⠀⠀   ⠀⠀⠀⠛⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣶⣿⣿⠀⠀⣿⣿⠉⣿⣿       ⣿⣿⠀⠀⠀⠀⠀     ⣿⣿⣿⣿⣿
      ⠀⠀⠀⣀⣿⣿⣿⣿⠉⠀⠀⠀⠀⠀⠀⠀⠀   ⠀⠀⠉⣿⣿⣿⣿      ⣿⣿⣿⠛⠛⠀⠀⣶⣿⣿⣿⣿⣿⣶    ⣿⣿⣤⣤⣤      ⣶⣿⣿⣿⣿⠛
      ⠀⠀⣤⣿⣿⣿⣿⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   ⠀⠉⣿⣿⣿⣿⣀ ⠿⠿⠿⠀⠀⠀   ⠿⠿⠉⠉⠉⠿⠿    ⠿⠿⠿⠿⠿ ⠀⣶⣿⣿⣿⣿⠿⠀
      ⠀⣤⣿⣿⣿⣿⣿⣶⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣶⣿⣿⣿⣿⣿⣀⠀⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⠉⠀⠀
      ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠉⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠀⠀
      ⠀⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠉⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀
↳
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━
↳
↳
██████████████ █ █ █ █  END   █ █ █ █ ██████████████
↳</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="47" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="48" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Example — Figures</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="49" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="4A" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="4B" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

TITLE:    SPECIAL CHARACTERS

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


The TIA Portal Basic font contains many different types of characters:

   •   Hyphens and whitespace characters
   •   Construction lines (these are specially ordered characters, useful for building tables &amp;c.)
   •   Arrows
   •   Box characters (for drawing box and line diagrams)
   •   Block characters
   •   Currency
   •   Punctuation (extended list)
   •   Non-proportional letters and numbers
   •   Greek characters
   •   Indexing characters
   •   Roman numerals
   •   Mathematical characters
   •   Geometric characters
   •   Dingbat characters

The following sections contain a list of these characters for use in TIA Portal comment fields.

Note:    The following tables of characters break the rules for comment fields by exceeding
     the prescribed comment field width of 44 em-spaces. This is done to give the 
     characters in a more concise form whilst maintaining reasonable descriptions for
     the characters



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
HYPHENS AND WHITESPACE CHARACTERS


— Em Dash               █ █ Em Space       (12 pixels)
–   En Dash              █ █   En Space        (6 pixels)
‐    Hyphen               █ █    Three-Per-Em Space (4 pixels)
¬   Soft Hyphen             █ █    Normal Space     (3 pixels)
                      █ █     Six-Per-Em Space      (2 pixels)



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
CONSTRUCTION LINES AND USEFUL LINES


[Copyable whitespace]
█ █ █ █ █ SixPerEM    ThreePerEm En   Em
█ █ █ █ █ Em En  ThreePerEm SixPerEM


[Em-space construction line]
▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄
[Central header — used for examples]
▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐▐
[Title start]
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
[Title end/section over-line]
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
[Subsection over-line]
▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
[Inline section over-line]
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
[Table row line]
 ――――――――――――――――――――――――――――――――――――――――――
[Revision row line]
 ―――――――――――――――――――――――――――――――――――――――――――
[Flourish divider]
               ━━━   ⬙⬙⬙⬙⬙⬙   ━━━
[End line]
██████████████ █ █ █ █  END   █ █ █ █ ██████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="4C" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="4D" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Special characters — Hyphens, whitespace and construction lines</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="4E" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="4F" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="50" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ARROWS


← Left Arrow              ⇐ Left dbl Arrow             ↩ Left Arrow Hook
↑ Up Arrow               ⇑ Up dbl Arrow               ↪ Right Arrow Hook
→ Right Arrow              ⇒ Right dbl Arrow           ⤣ North West Arrow Hook
↓ Down Arrow             ⇓ Down dbl Arrow             ⤤ North East Arrow Hook
↔ Left Right Arrow             ⇔ Left Right dbl Arrow          ⤥ South East Arrow Hook
↕ Up Down Arrow          ⇕ Up Down dbl Arrow          ⤦ South West Arrow Hook
↖ North West Arrow          ⇖ North West dbl Arrow         ↰    Up Arrow Tip Left
↗ North East Arrow          ⇗ North East dbl Arrow          ↱    Up Arrow Tip Right
↘ South East Arrow          ⇘ South East dbl Arrow         ↲    Down Arrow Tip Left
↙ South West Arrow         ⇙    South West dbl Arrow        ↳ Down Arrow Tip Right
⤡ North West &amp; South East Arrow    ⤂ Left dbl Arrow vert Stroke       ↴ Right Arrow Corner down
⤢ North East &amp; South West Arrow    ⤃ Right dbl Arrow vert Stroke     ↵ Down Arrow Corner Left
⇄ Right Arrow Over Left Arrow       ⤆ Left dbl Arrow From Bar        ↶ Anticlockwise Top Semicircle Arrow
⇅ Up Arrow Left Of down Arrow        ⤇ Right dbl Arrow From Bar         ↷ Clockwise Top Semicircle Arrow
⇆ Left Arrow Over Right Arrow       ⤄ Left Right dbl Arrow vert Stroke    ↺ Anticlockwise Open Circle Arrow
⇇ Left Paired Arrows           ↼ Left Harpoon Barb up         ↻ Clockwise Open Circle Arrow
⇈ Up Paired Arrows             ↽ Left Harpoon Barb down         ⟲ Anticlockwise Gapped Circle Arrow
⇉ Right Paired Arrows         ↾ Up Harpoon Barb Right         ⟳ Clockwise Gapped Circle Arrow
⇊ Down Paired Arrows           ↿ Up Harpoon Barb Left
↤ Left Arrow From Bar           ⇀ Right Harpoon Barb up         ▲  Black Up Triangle 
↥ Up Arrow From Bar          ⇁ Right Harpoon Barb down       ▼  Black Down Triangle
↦ Right Arrow From Bar         ⇂ Down Harpoon Barb Right      ▶  Black Right Triangle
↧ down Arrow From Bar        ⇃ Down Harpoon Barb Left         ◀  Black Left Triangle
↨ Up Down Arrow Base         ⇋ Left Harpoon Over Right Harpoon
↞ Left Two head Arrow          ⇌ Right Harpoon Over Left Harpoon
↟ up Two head Arrow         ↯ Down Zigzag Arrow
↠ Right Two head Arrow
↡ Down Two head Arrow
⤙ Left Arrow-Tail
⤚ Right Arrow-Tail
⤛ Left dbl Arrow-Tail    
⤜ Right dbl Arrow-Tail    
⤝ Left Arrow To Black Diamond    
⤞ Right Arrow To Black Diamond    

⟵  Long Left Arrow             ↢ Left Arrow Tail             ⌃   Up Arrowhead
⟶  Long Right Arrow          ↣ Right Arrow Tail             ⌄   Down Arrowhead
⟷  Long Left Right Arrow         ⤟ Left Arrow Bar To Black Diamond   ⌅   Projective
⟸  Long Left dbl Arrow         ⤠ Right Arrow Bar To Black Diamond    ⌆   Perspective
⟹  Long Right dbl Arrow          ⤌    Left dbl Dash Arrow         ⟰ Up Quadruple Arrow
⟺  Long Left Right dbl Arrow        ⤍    Right dbl Dash Arrow         ⟱ Down Quadruple Arrow
⟻  Long Left Arrow From Bar       ⤎    Left Triple Dash Arrow        ⤊ Up Triple Arrow
⟼  Long Right Arrow From Bar        ⤏    Right Triple Dash Arrow         ⤋ Down Triple Arrow
⟽  Long Left dbl Arrow From Bar       ⤈    Down Arrow horiz Stroke          ⤈   Down Arrow horiz Stroke
⟾  Long Right dbl Arrow From Bar    ⤉    Up Arrow horiz Stroke             ⤉   Up Arrow horiz Stroke



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
BOX CHARACTERS


─ Box Light horiz            ╌ Box Light dbl Dash horiz       ⋮     Vert Ellipsis
│ Box Light vert             ╎ Box Light dbl Dash vert        ⋯    Midline horiz Ellipsis
╱ Box Light diag top Right Left      ╍ Box Heavy dbl Dash horiz       ⋰     Up Right diag Ellipsis
╲ Box Light diag top Left To btm Right    ╏ Box Heavy dbl Dash vert          ⋱    Down Right diag Ellipsis
╳ Box Light diag Cross          ┄ Box Light Triple Dash horiz      ╴ Box Light Left
━ Box Heavy horiz             ┆ Box Light Triple Dash vert       ╵ Box Light Up
┃ Box Heavy vert           ┅ Box Heavy Triple Dash horiz       ╶ Box Light Right
═ Box dbl horiz               ┇ Box Heavy Triple Dash vert        ╷ Box Light Down
║ Box dbl vert              ┈ Box Light Quadruple Dash horiz     ╸ Box Heavy Left
                      ┊ Box Light Quadruple Dash vert       ╹ Box Heavy Up
                      ┉ Box Heavy Quadruple Dash horiz      ╺ Box Heavy Right
                      ┋ Box Heavy Quadruple Dash vert     ╻ Box Heavy Down

┌ Box Light Down &amp; Right        ├ Box Light vert &amp; Right         ─ Box Light horiz
└ Box Light Up &amp; Right           ┤ Box Light vert &amp; Left        │ Box Light vert
┐ Box Light Down &amp; Left           ┬ Box Light Down &amp; horiz         ┼ Box Light vert &amp; horiz
┘ Box Light Up &amp; Left          ┴ Box Light Up &amp; horiz  
┏ Box Heavy Down &amp; Right         ┣ Box Heavy vert &amp; Right          ━ Box Heavy horiz
┗ Box Heavy Up &amp; Right         ┫ Box Heavy vert &amp; Left         ┃ Box Heavy vert
┓ Box Heavy Down &amp; Left         ┳ Box Heavy Down &amp; horiz       ╋ Box Heavy vert &amp; horiz
┛ Box Heavy Up &amp; Left        ┻ Box Heavy Up &amp; horiz  
    
┍ Box Down Light &amp; Right Heavy     ┝ Box vert Light &amp; Right Heavy      ━ Box Heavy horiz
┕ Box Up Light &amp; Right Heavy        ┥ Box vert Light &amp; Left Heavy     │ Box Light vert
┑ Box Down Light &amp; Left Heavy     ┯ Box Down Light &amp; horiz Heavy      ┿ Box vert Light &amp; horiz Heavy
┙ Box Up Light &amp; Left Heavy       ┷ Box Up Light &amp; horiz Heavy  

┎ Box Down Heavy &amp; Right Light     ┠ Box vert Heavy &amp; Right Light      ─ Box Light horiz
┖ Box Up Heavy &amp; Right Light        ┨ Box vert Heavy &amp; Left Light     ┃ Box Heavy vert
┒ Box Down Heavy &amp; Left Light     ┰ Box Down Heavy &amp; horiz Light      ╂ Box vert Heavy &amp; horiz Light
┚ Box Up Heavy &amp; Left Light       ┸ Box Up Heavy &amp; horiz Light  

┦ Box Up Heavy &amp; Left Down Light     ┪ Box Up Light &amp; Left Down Heavy     ╀ Box Up Heavy &amp; Down horiz Light
┶ Box Right Heavy &amp; Left Up Light   ┹ Box Right Light &amp; Left Up Heavy   ┾ Box Right Heavy &amp; Left vert Light
┟ Box Down Heavy &amp; Right Up Light     ┡ Box Down Light &amp; Right Up Heavy     ╁ Box Down Heavy &amp; Up horiz Light
┭ Box Left Heavy &amp; Right Down Light    ┲ Box Left Light &amp; Right Down Heavy    ┽ Box Left Heavy &amp; Right vert Light
 
┞ Box Up Heavy &amp; Right Down Light     ┢ Box Up Light &amp; Right Down Heavy     ╈ Box Up Light &amp; Down horiz Heavy
┮ Box Right Heavy &amp; Left Down Light    ┱ Box Right Light &amp; Left Down Heavy    ╉ Box Right Light &amp; Left vert Heavy
┧ Box Down Heavy &amp; Left Up Light     ┩ Box Down Light &amp; Left Up Heavy     ╇ Box Down Light &amp; Up horiz Heavy
┵ Box Left Heavy &amp; Right Up Light      ┺ Box Left Light &amp; Right Up Heavy   ╊ Box Left Light &amp; Right vert Heavy

╼ Box Light Left &amp; Heavy Right                            ╄ Box Right Up Heavy &amp; Left Down Light
╽ Box Light Up &amp; Heavy Down                            ╆ Box Right Down Heavy &amp; Left Up Light
╾ Box Heavy Left &amp; Light Right                            ╅ Box Left Down Heavy &amp; Right Up Light
╿ Box Heavy Up &amp; Light Down                            ╃ Box Left Up Heavy &amp; Right Down Light

╔ Box dbl Down &amp; Right         ╠ Box dbl vert &amp; Right         ═ Box dbl horiz 
╚ Box dbl Up &amp; Right           ╣ Box dbl vert &amp; Left           ║ Box dbl vert
╗ Box dbl Down &amp; Left        ╦ Box dbl Down &amp; horiz         ╬ Box dbl vert &amp; horiz
╝ Box dbl Up &amp; Left          ╩ Box dbl Up &amp; horiz  
 
╒ Box Down Single &amp; Right dbl     ╞ Box vert Single &amp; Right dbl      ═ Box dbl horiz
╘ Box Up Single &amp; Right dbl        ╡ Box vert Single &amp; Left dbl        │ Box Light vert
╕ Box Down Single &amp; Left dbl        ╤ Box Down Single &amp; horiz dbl      ╪ Box vert Single &amp; horiz dbl
╛ Box Up Single &amp; Left dbl       ╧ Box Up Single &amp; horiz dbl  

╓ Box Down dbl &amp; Right Single     ╟ Box vert dbl &amp; Right Single      ─ Box Light horiz
╙ Box Up dbl &amp; Right Single        ╢ Box vert dbl &amp; Left Single        ║ Box dbl vert
╖ Box Down dbl &amp; Left Single        ╥ Box Down dbl &amp; horiz Single      ╫ Box vert dbl &amp; horiz Single
╜ Box Up dbl &amp; Left Single       ╨ Box Up dbl &amp; horiz Single  



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
BLOCK CHARACTERS


▀ Top Half Block             ❘    Light vert Bar              ❘ ❘     En Space
▄ Btm Half Block            ❙    Medium vert Bar           ❘ ❘   Em Space
▐ Right Half Block          ❚   Heavy vert Bar  
▌ Left Half Block    

▔ Top One Eighth Block        ▉ Left Seven Eighths Block
▁ Btm One Eighth Block          ▊ Left Three Quarters Block
▂ Btm One Quarter Block        ▋ Left Five Eighths Block
▃ Btm Three Eighths Block      ▌ Left Half Block
▄ Btm Half Block            ▍ Left Three Eighths Block
▅ Btm Five Eighths Block         ▎ Left One Quarter Block
▆ Btm Three Quarters Block       ▏ Left One Eighth Block
▇ Btm Seven Eighths Block        ▕ Right One Eighth Block
█ Full Block
░ Light Shade
▒ Medium Shade    
▓ Dark Shade    


██████████████ █ █ █ █  END   █ █ █ █ ██████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="51" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="52" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Special characters — Arrows, box and block characters</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="53" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="54" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="55" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>s▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
CURRENCY


₳   Austral Sign             €   Euro Sign              ₦  Naira Sign
₵   Cedi Sign               ₠  Euro-Currency Sign          ₪  New Shekel Sign
¢   Cent Sign              ₣  French Franc Sign           ₧   Peseta Sign
₡   Colon Sign               ₰   German Penny Sign           ₱   Peso Sign
₢   Cruzeiro Sign           ₲   Guarani Sign              £  Pound Sign
¤  Currency Sign             ₴   Hryvnia Sign            ₨    Rupee Sign
$   Dollar Sign            ₭   Kip Sign              ₮   Tugrik Sign
₫   Dong Sign             ₤   Lira Sign             ₩  Won Sign
₯ Drachma Sign            ₥  Mill Sign              ¥   Yen Sign



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
PUNCTUATION AND COMMON SYMBOLS


#  Hash Sign             "   Quote                 §   Section Sign
$   Dollar Sign            “    Left dbl quote             ¶   Pilcrow Sign
%  Percent Sign            ”    Right dbl quote
&amp;   Ampersand             '    Apostrophe  
*   Asterisk              ‘    Left Single quote          †   Dagger
~   Tilde                 ’    Right Single quote           ‡   Dbl Dagger
+   Plus Sign               ‹    Single Left Angle quote       •   Bullet
-    Hyphen/minus            ›    Single Right Angle quote        ·    Middle Dot
=   Equals Sign                                ‣   Triangular Bullet
&lt;   Less-Than Sign           ´   Acute Accent              ⁃    Hyphen Bullet
&gt;   Greater-Than Sign           `   Grave Accent
(    Left Parenthesis
)    Right Parenthesis            ©  Copyright Sign           ⁎   Low Asterisk
[    Left Square Bracket           ®  Registered Sign  
]    Right Square Bracket         ℀  Account Of               ․    One Dot Leader
{   Left Curly Bracket          ℁  Addressed To The Subject      ‥   Two Dot Leader
}   Right Curly Bracket          ℂ  Dbl-Struck Capital C           …  Horiz Ellipsis
〈    Left Angle Bracket           ℄   Centre Line Symbol  
〉    Right Angle Bracket            ℅  Care Of               ※  Reference Mark
⁅    Left Square Bracket Quill        ℗  Sound Recording Copyright       ‼   Dbl Exclamation Mark
⁆    Right Square Bracket Quill      ™  Trade Mark Sign            ‽   Interrobang
,    Comma                                 ⁇  Dbl Question Mark
.    Full Stop                                   ⁈   Question Exclamation Mark
:    Colon                                  ⁉  Exclamation Question Mark
;    Semicolon    
!    Exclamation Mark            ⁑   Two Asterisks Aligned vertically     |    Vert Line
?   Question Mark           ⁂   Asterism               ¦    Broken Bar
@  Commercial At                              ‖    Dbl vert Line
^   Circumflex Accent            ⁀  Character Tie              ‗   Dbl Low Line
/    Solidus               ‿  Undertie             ⁞    Vert Four Dots
\    Reverse Solidus            ⁐  Close Up
_   Underscore
― Horiz Bar    
¯   Macron
‾   Overline



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
NON-PROPORTIONAL (FULL-WIDTH) LETTERS


Ａ Fullwidth Capital Letter A        ａ Fullwidth Small Letter A       ＂ Fullwidth quote
Ｂ Fullwidth Capital Letter B        ｂ Fullwidth Small Letter B       ＇ Fullwidth Apostrophe
Ｃ Fullwidth Capital Letter C        ｃ Fullwidth Small Letter C       ＃ Fullwidth Number Sign
Ｄ Fullwidth Capital Letter D       ｄ Fullwidth Small Letter D       ＄ Fullwidth Dollar Sign
Ｅ Fullwidth Capital Letter E        ｅ Fullwidth Small Letter E       ％ Fullwidth Percent Sign
Ｆ Fullwidth Capital Letter F        ｆ Fullwidth Small Letter F       ＆ Fullwidth Ampers&amp;
Ｇ Fullwidth Capital Letter G       ｇ Fullwidth Small Letter G       ＊ Fullwidth Asterisk
Ｈ Fullwidth Capital Letter H       ｈ Fullwidth Small Letter H          ～ Fullwidth Tilde
Ｉ Fullwidth Capital Letter I         ｉ Fullwidth Small Letter I        ＋ Fullwidth Plus Sign
Ｊ Fullwidth Capital Letter J         ｊ Fullwidth Small Letter J        － Fullwidth Hyphen-Minus
Ｋ Fullwidth Capital Letter K        ｋ Fullwidth Small Letter K       ＝ Fullwidth Equals Sign
Ｌ Fullwidth Capital Letter L        ｌ Fullwidth Small Letter L       ＜ Fullwidth Less-Than Sign
Ｍ Fullwidth Capital Letter M       ｍ Fullwidth Small Letter M         ＞ Fullwidth Greater-Than Sign
Ｎ Fullwidth Capital Letter N       ｎ Fullwidth Small Letter N          （ Fullwidth Left Parenthesis
Ｏ Fullwidth Capital Letter O       ｏ Fullwidth Small Letter O       ） Fullwidth Right Parenthesis
Ｐ Fullwidth Capital Letter P        ｐ Fullwidth Small Letter P       ［ Fullwidth Left Square Bracket
Ｑ Fullwidth Capital Letter Q       ｑ Fullwidth Small Letter Q         ］ Fullwidth Right Square Bracket
Ｒ Fullwidth Capital Letter R        ｒ Fullwidth Small Letter R       ｛ Fullwidth Left Curly Bracket
Ｓ Fullwidth Capital Letter S        ｓ Fullwidth Small Letter S       ｝ Fullwidth Right Curly Bracket
Ｔ Fullwidth Capital Letter T        ｔ Fullwidth Small Letter T        ， Fullwidth Comma
Ｕ Fullwidth Capital Letter U       ｕ Fullwidth Small Letter U       ． Fullwidth Full Stop
Ｖ Fullwidth Capital Letter V        ｖ Fullwidth Small Letter V       ： Fullwidth Colon
Ｗ Fullwidth Capital Letter W       ｗ Fullwidth Small Letter W         ； Fullwidth Semicolon
Ｘ Fullwidth Capital Letter X        ｘ Fullwidth Small Letter X       ！ Fullwidth Exclamation Mark
Ｙ Fullwidth Capital Letter Y        ｙ Fullwidth Small Letter Y       ？ Fullwidth Question Mark
Ｚ Fullwidth Capital Letter Z        ｚ Fullwidth Small Letter Z       ＠ Fullwidth Commercial At
                                        ＾ Fullwidth Circumflex Accent
０ Fullwidth Digit Zero         ５ Fullwidth Digit Five          ／ Fullwidth Solidus
１ Fullwidth Digit One         ６ Fullwidth Digit Six         ＼ Fullwidth Reverse Solidus
２ Fullwidth Digit Two          ７ Fullwidth Digit Seven         ＿ Fullwidth Low Line
３ Fullwidth Digit Three          ８ Fullwidth Digit Eight           ｜ Fullwidth vert Line
４ Fullwidth Digit Four         ９ Fullwidth Digit Nine         ❘ ❘   Fullwidth space    



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
SMALL FORM LETTERS (MODIFIERS)


ᴬ  Small form Capital Letter A        ᵃ Small form Small Letter A
ᴮ  Small form Capital Letter B        ᵇ Small form Small Letter B
ᵓ  Small form Capital Letter C        ᶜ Small form Small Letter C
ᴰ  Small form Capital Letter D       ᵈ Small form Small Letter D
ᴱ  Small form Capital Letter E        ᵉ Small form Small Letter E
ᶠ   Small form Capital Letter F        ᶠ  Small form Small Letter F
ᴳ    Small form Capital Letter G       ᵍ Small form Small Letter G
ᴴ  Small form Capital Letter H       ʰ    Small form Small Letter H
ᴵ   Small form Capital Letter I         ᶤ  Small form Small Letter I
ᴶ  Small form Capital Letter J         ʲ     Small form Small Letter J
ᴷ  Small form Capital Letter K        ᵏ Small form Small Letter K
ᴸ  Small form Capital Letter L        ˡ     Small form Small Letter L
ᴹ    Small form Capital Letter M       ᵐ   Small form Small Letter M
ᴺ  Small form Capital Letter N       ⁿ    Small form Small Letter N
ᴼ    Small form Capital Letter O       ᵒ Small form Small Letter O
ᴾ  Small form Capital Letter P        ᵖ Small form Small Letter P
ᵠ  Small form Capital Letter Q       ᵠ    Small form Small Letter Qt
ᴿ  Small form Capital Letter R        ʳ    Small form Small Letter R
ˢ  Small form Capital Letter S        ˢ Small form Small Letter S
ᵀ  Small form Capital Letter T        ᵗ    Small form Small Letter T
ᵁ  Small form Capital Letter U       ᵘ Small form Small Letter U
ⱽ  Small form Capital Letter V        ᵛ    Small form Small Letter V
ᵂ Small form Capital Letter W       ʷ    Small form Small Letter W
ˣ  Small form Capital Letter X        ˣ Small form Small Letter X
ʸ  Small form Capital Letter Y        ʸ Small form Small Letter Y
ᶻ  Small form Capital Letter Z        ᶻ Small fsorm Small Letter Z

⁰  Small form Digit Zero         ⁵ Small form Digit Five        ⁻ Small form Minus
¹  Small form Digit One         ⁶ Small form Digit Six       ⁺ Small form Plus
²  Small form Digit Two          ⁷ Small form Digit Seven       ⁼ Small form Equals
³  Small form Digit Three          ⁸ Small form Digit Eight      ⁽  Small form Left Parenthesis
⁴  Small form Digit Four         ⁹ Small form Digit Nine      ⁾  Small form Right Parenthesis

Note:    There are no small form characters for Capital letters C, F, Q, Z, Y and Z. There is no 
     lower case letter q. The Qs are replaced with the small for Greek letter Phi. The 
     Capital C uses a reverse C and the other Capital letters use the lower case 
     equivalents    


██████████████ █ █ █ █  END   █ █ █ █ ██████████████



</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="56" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="57" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Special characters — Currency, punctuation and full-width and small characters</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="58" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="59" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="5A" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
GREEK CHARACTERS


Α  Greek Capital Letter Alpha        α   Greek Small Letter Alpha
Β   Greek Capital Letter Beta       β   Greek Small Letter Beta
Γ   Greek Capital Letter Gamma       γ   Greek Small Letter Gamma
Δ  Greek Capital Letter Delta      δ   Greek Small Letter Delta
Ε   Greek Capital Letter Epsilon     ε   Greek Small Letter Epsilon
Ζ   Greek Capital Letter Zeta       ζ   Greek Small Letter Zeta
Η  Greek Capital Letter Eta       η   Greek Small Letter Eta
Θ  Greek Capital Letter Theta      θ   Greek Small Letter Theta
Ι    Greek Capital Letter Iota         ι    Greek Small Letter Iota
Κ   Greek Capital Letter Kappa       κ   Greek Small Letter Kappa
Λ   Greek Capital Letter Lambda       λ   Greek Small Letter Lambda
Μ  Greek Capital Letter Mu       μ   Greek Small Letter Mu
Ν  Greek Capital Letter Nu        ν   Greek Small Letter Nu
Ξ   Greek Capital Letter Xi         ξ   Greek Small Letter Xi
Ο  Greek Capital Letter Omicron      ο   Greek Small Letter Omicron
Π  Greek Capital Letter Pi          π   Greek Small Letter Pi
Ρ   Greek Capital Letter Rho      ρ   Greek Small Letter Rho
Σ   Greek Capital Letter Sigma       ς   Greek Small Letter Final Sigma
                      σ   Greek Small Letter Sigma
Τ   Greek Capital Letter Tau         τ   Greek Small Letter Tau
Υ   Greek Capital Letter Upsilon     υ   Greek Small Letter Upsilon
Φ  Greek Capital Letter Phi       φ  Greek Small Letter Phi
Χ   Greek Capital Letter Chi       χ   Greek Small Letter Chi
Ψ  Greek Capital Letter Psi        ψ  Greek Small Letter Psi
Ω  Greek Capital Letter Omega      ω  Greek Small Letter Omega


▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
INDEXING CHARACTERS  (all characters are 1 EM wide)


① Circled One              ⑴ Bracketed One           ⒈ One Full Stop
② Circled Two              ⑵ Bracketed Two           ⒉ Two Full Stop
③ Circled Three              ⑶ Bracketed Three           ⒊ Three Full Stop
④ Circled Four             ⑷ Bracketed Four             ⒋ Four Full Stop
⑤ Circled Five              ⑸ Bracketed Five           ⒌ Five Full Stop
⑥ Circled Six             ⑹ Bracketed Six             ⒍ Six Full Stop
⑦ Circled Seven             ⑺ Bracketed Seven          ⒎ Seven Full Stop
⑧ Circled Eight            ⑻ Bracketed Eight            ⒏ Eight Full Stop
⑨ Circled Nine             ⑼ Bracketed Nine          ⒐ Nine Full Stop
⑩ Circled Ten            ⑽ Bracketed Ten            ⒑ Ten Full Stop
⑪ Circled Eleven            ⑾ Bracketed Eleven         ⒒ Eleven Full Stop
⑫ Circled Twelve            ⑿ Bracketed Twelve         ⒓ Twelve Full Stop
⑬ Circled Thirteen             ⒀ Bracketed Thirteen          ⒔ Thirteen Full Stop
⑭ Circled Fourteen           ⒁ Bracketed Fourteen        ⒕ Fourteen Full Stop
⑮ Circled Fifteen            ⒂ Bracketed Fifteen         ⒖ Fifteen Full Stop
⑯ Circled Sixteen           ⒃ Bracketed Sixteen           ⒗ Sixteen Full Stop
⑰ Circled Seventeen           ⒄ Bracketed Seventeen        ⒘ Seventeen Full Stop
⑱ Circled Eighteen           ⒅ Bracketed Eighteen        ⒙ Eighteen Full Stop
⑲ Circled Nineteen           ⒆ Bracketed Nineteen           ⒚ Nineteen Full Stop
⑳ Circled Twenty            ⒇ Bracketed Twenty         ⒛ Twenty Full Stop



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ROMAN NUMERALS


Ⅰ    Roman num One          ⅰ    Small Roman num One
Ⅱ   Roman num Two           ⅱ   Small Roman num Two
Ⅲ  Roman num Three           ⅲ  Small Roman num Three
Ⅳ  Roman num Four          ⅳ  Small Roman num Four
Ⅴ   Roman num Five          ⅴ   Small Roman num Five
Ⅵ  Roman num Six             ⅵ  Small Roman num Six
Ⅶ Roman num Seven         ⅶ    Small Roman num Seven
Ⅷ    Roman num Eight           ⅷ   Small Roman num Eight
Ⅸ  Roman num Nine            ⅸ  Small Roman num Nine
Ⅹ   Roman num Ten           ⅹ   Small Roman num Ten
Ⅺ  Roman num Eleven           ⅺ  Small Roman num Eleven
Ⅻ Roman num Twelve           ⅻ  Small Roman num Twelve
Ⅼ   Roman num Fifty           ⅼ    Small Roman num Fifty
Ⅽ   Roman num One Hundred        ⅽ   Small Roman num One Hundred
Ⅾ  Roman num Five Hundred      ⅾ   Small Roman num Five Hundred
Ⅿ  Roman num One Thousand      ⅿ     Small Roman num One Thousand    


████████████████████ END    ████████████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="5B" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="5C" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Special characters — Greek, indexing characters and Roman numerals</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="5D" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="5E" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="5F" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
MATHEMATICAL OPERATORS


×   Multiplication Sign          ¹   Superscript One           ∅  Empty Set
÷   Division Sign              ²   Superscript Two            ∈  Element Of
+   Plus sign                ³   Superscript Three         ∉  Not An Element Of
−   Minus Sign            ½  Vulgar Fraction One Half         ∊   Small Element Of
⁒   Commercial Minus Sign       ⅓  Vulgar Fraction One Third       ∋  Contains As Member
±   Plus-Minus Sign             ⅔  Vulgar Fraction Two Thirds      ∌  Does Not Contain As Member
∓   Minus-Or-Plus Sign          ¼  Vulgar Fraction One Quarter        ∍   Small Contains As Member
≤   Less-Than Or Equal To       ¾  Vulgar Fraction Three Quarters      ∩   Intersection
≥   Greater-Than Or Equal To        ⅕  Vulgar Fraction One Fifth        ∪   Union
≪  Much Less-Than            ⅖  Vulgar Fraction Two Fifths       ⊂  Subset Of
≫  Much Greater-Than          ⅗  Vulgar Fraction Three Fifths       ⊃  Superset Of
√  Square Root             ⅘  Vulgar Fraction Four Fifths      ⊄  Not A Subset Of
∛  Cube Root             ⅙  Vulgar Fraction One Sixth       ⊅  Not A Superset Of
∜  Fourth Root              ⅚  Vulgar Fraction Five Sixths        ⊆  Subset Of Or Equal To
∝  Proportional To           ⅛  Vulgar Fraction One Eighth       ⊇  Superset Of Or Equal To
∞  Infinity              ⅜  Vulgar Fraction Three Eighths      ⊈  not A Subset Of Nor Equal To
°   Degree Sign            ⅝  Vulgar Fraction Five Eighths     ⊉  not A Superset Of Nor Equal To
µ   Micro Sign             ⅞  Vulgar Fraction Seven Eighths    ⊊  Subset Of Not Equal To
‰   Per Mille Sign              ⅟   Fraction Numerator One         ⊋  Superset Of Not Equal To
‱  Per Ten Thousand&amp; Sign          ⁄    Fraction Slash            ⊌   Multiset
∀  For All                                    ⊍   Multiset Multiplication
∁   Complement                                 ⊎   Multiset Union
∂   Partial Differential                              ⊏  Square Image Of
∃   There Exists                                ⊐  Square Original Of
∄   There Does Not Exist          ∆   Increment             ⊑  Square Image Of Or Equal To
∴    Therefore               ∇  Nabla               ⊒  Square Original Of Or Equal To
∵    Because                                   ⊓  Square Cap
∶   Ratio                                   ⊔  Square Cup
∷  Proportion    
∿  Sine Wave    
     
∥   Parallel To             ∫    Integral               ⌠    Top Half Integral
∦   Not Parallel To            ∬    Dbl Integral              ⌡    Bottom Half Integral
∟ Right Angle              ∭   Triple Integral             ❲   Light Left Shell Bracket 
⊾  Right Angle Arc           ∮   Contour Integral           ❳   Light Right Shell Bracket 
⊿  Right Triangle             ∯    Surface Integral            ⟪   Maths Left dbl Angle Bracket
∠  Angle               ∰   Volume Integral            ⟫   Maths Right dbl Angle Bracket
∡  Measured Angle           ∱   Clockwise Integral           ⟬   Maths Left White Shell Bracket
∢  Spherical Angle            ∲   Clockwise Contour Integral       ⟭   Maths Right White Shell Bracket
⌒    Arc                 ∳   Anticlockwise Contour Integral
⌓    Segment    
⌔     Sector    

≃   Asymptotically Equal To       ⊕    Circled Plus              ′    Prime
≄   Not Asymptotically Equal To      ⊖    Circled Minus              ″    Dbl Prime
≅   Approx Equal To            ⊗    Circled Times              ‴   Triple Prime
≆   Approx But Not Actually Equal To    ⊘    Circled Division Slash        ⁗   Quadruple Prime
≇   Not approx Nor Actually Equal To   ⊙    Circled Dot Operator          ‵    Reversed Prime
≈   Almost Equal To            ⊚    Circled Ring Operator        ‶    Reversed dbl Prime
≉  Not Almost Equal To          ⊛    Circled Asterisk Operator        ‷   Reversed Triple Prime
≊   Almost Equal Or Equal To       ⊜    Circled Equals
≋   Triple Tilde             ⊝    Circled Dash
≌   All Equal To              ⊞    Squared Plus
≍  Equivalent To             ⊟    Squared Minus
≡   Identical To              ⊠    Squared Times
≢   Not Identical To             ⊡    Squared Dot Operator
     
∧  Logical &amp;               ⊢  Right Tack              °   Degree Sign
∨  Logical Or             ⊣  Left Tack                ℃    Degree Celsius
⊻  Xor                 ⊤  Down Tack               ℉    Degree Fahrenheit
⊼  Nand                ⊥  Up Tack                Ω    Ohm Sign    


██████████████ █ █ █ █  END   █ █ █ █ ██████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="60" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="61" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Special characters — Mathematical operators (including vulgar fractions)</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="62" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="63" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="64" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
GEOMETRICAL CHARACTERS


⌉    Right Ceiling            ▬  Black Rectangle            ▭  White Rectangle
⌋    Right Floor                ▮   Black vert Rectangle          ▯   White vert Rectangle
⌈    Left Ceiling               ▰  Black Parallelogram           ▱  White Parallelogram
⌊    Left Floor               ◆  Black Diamond             ◇ White Diamond
⌝   Top Right Corner 
⌟   Bottom Right Corner          ◈  Diamond with Diamond          ◊  Lozenge
⌜   Top Left Corner           ▲  Black Up Triangle             △  White Up Triangle
⌞   Bottom Left Corner          ▶  Black Right Triangle         ▷  White Right Triangle
◝ Top Right quad Circular Arc        ▼  Black Down Triangle          ▽ White Down Triangle
◞ Btm Right quad Circular Arc       ◀  Black Left Triangle           ◁  White Left Triangle
◜ Top Left quad Circular Arc       ▴   Black Up Small Triangle       ▵   White Up Small Triangle
◟ Btm Left quad Circular Arc      ▸   Black Right Small Triangle      ▹   White Right Small Triangle
◘ Inv Bullet               ▾   Black Down Small Triangle     ▿   White Down Small Triangle
◙ Inv White Circle             ◂   Black Left Small Triangle         ◃   White Left Small Triangle
◚ Top Half inv White Circle       ►  Black Right Pointer          ▻  White Right Pointer
◛ Btm Half inv White Circle      ◄  Black Left Pointer          ◅  White Left Pointer
     
◻  White Medium Square       ◼  Black Medium Square          ⬔    Square top Right diag Half Black
□  White Square              ■  Black Square           ⬕    Square btm Left diag Half Black
◽   White Medium Small Square     ◾   Black Medium Small Square     ⬖    Diamond Left Half Black
▫  White Small Square           ▪  Black Small Square         ⬗    Diamond Right Half Black
▣  Square with Square                              ⬘    Diamond Top Half Black
◉  Fisheye                                  ⬙    Diamond Bottom Half Black
○  White Circle              ●  Black Circle              ◪  Square btm Right diag Half Black
◌  Dotted Circle              ◍  Circle vert Fill              ◫  White Square vert Bisecting Line
◯ Large Circle             ◎ Bullseye              ◬  White Up Triangle Dot
▢  White Square Rounded Corners                        ◭  Up Triangle Left Black
▤  Square horiz Fill                               ◮  Up Triangle Right Black
▥  Square vert Fill                                ◐  Circle Left Half Black
▦  Square Orthogonal Crosshatch Fill   ◖   Left Half Black Circle          ◑  Circle Right Half Black
▧  Square top Left To btm Right Fill     ◗   Right Half Black Circle        ◒  Circle btm Half Black
▨  Square top Right To btm Left Fill                       ◓  Circle top Half Black
▩  Square diag Crosshatch Fill    
     
◸    Top Left Triangle                                     ◰    White Square top Left quad
◹    Top Right Triangle                               ◱    White Square btm Left quad
◿    Btm Right Triangle                              ◲    White Square btm Right quad
◺    Btm Left Triangle                                ◳    White Square top Right quad
⧖  White Hourglass           ⧗  Black Hourglass            ◴    White Circle top Left quad
⋈  Bowtie                                         ◵    White Circle btm Left quad



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ORNAMENTAL CHARACTERS


⌂  House              ☣  Biohazard Sign           ♚  Black Chess King
⌕  Telephone Recorder           ☤  Caduceus              ♛  Black Chess Queen
⌖   Position Indicator            ☥  Ankh                 ♜  Black Chess Rook
⌗    Viewdata Square          ☮    Peace Symbol            ♝  Black Chess Bishop
⌘    Place Of Interest Sign        ☯ Yin Yang                ♞  Black Chess Knight
⌚     Watch               ☰    Trigram For Heaven           ♟  Black Chess Pawn
⌛  Hourglass             ☱    Trigram For Lake           ♠  Black Spade Suit
⌢  Frown                  ☲    Trigram For Fire             ♡  White Heart Suit
⌣  Smile               ☳    Trigram For Thunder           ♢  White Diamond Suit
⌥  Option Key            ☴    Trigram For Wind           ♣    Black Club Suit
⌦   Erase To The Right           ☵    Trigram For Water            ♤  White Spade Suit
⌧    X In A Rectangle Box          ☶    Trigram For Mountain           ♥  Black Heart Suit
⌨  Keyboard               ☷    Trigram For Earth          ♦  Black Diamond Suit
⌫   Erase To The Left          ☸ Wheel Of Dharma            ♧    White Club Suit
                      ☹  White Frowning Face         ♨    Hot Springs
                      ☺  White Smiling Face         ♩  Quarter Note
                      ☻  Black Smiling Face          ♪  Eighth Note
☀  Black Sun Rays              ☼    White Sun Rays           ♫  Beamed Eighth Notes
☁     Cloud               ☽  First Quarter Moon          ♬  Beamed Sixteenth Notes
☂     Umbrella               ☾  Last Quarter Moon          ♭ Music Flat Sign
☃  Snowman             ☿  Mercury               ♮  Music Natural Sign
☄  Comet                 ♀  Female Sign               ♯ Music Sharp Sign
★  Black Star              ♁  Earth                ⚀ Die Face-1
☆ White Star             ♂    Male Sign              ⚁ Die Face-2
☇   Lightning               ♃  Jupiter                 ⚂ Die Face-3
☈  Thunderstorm            ♄  Saturn                 ⚃ Die Face-4
☉    Sun                ♅  Uranus                ⚄ Die Face-5
☊ Ascending Node           ♆   Neptune             ⚅ Die Face-6
☋ Descending Node           ♇  Pluto                 ⚆ White Circle Dot Right
☌  Conjunction             ♈   Aries                 ⚇ White Circle Two Dots
☍    Opposition               ♉   Taurus                 ⚈ Black Circle White Dot Right
☎   Black Telephone           ♊ Gemini               ⚉ Black Circle Two White Dots
☏   White Telephone           ♋   Cancer                ⚠  Warning Sign
☐  Ballot Box              ♌ Leo                ✁   Top Blade Scissors
☑  Ballot Box Check           ♍ Virgo                ✂   Black Scissors
☒  Ballot Box X              ♎    Libra                 ✃   Btm Blade Scissors
☓   Saltire              ♏    Scorpius             ✄   White Scissors
                      ♐ Sagittarius               
☚    Black Left point Index        ♑   Capricorn              ✆    Telephone Location Sign
☛    Black Right point Index         ♒   Aquarius                ✇  Tape Drive
☜    White Left point Index        ♓    Pisces                 ✈  Airplane
☝  White Up point Index          ♔  White Chess King          ✉  Envelope
☞    White Right point Index         ♕  White Chess Queen           ✍ Writing H&amp;
☟  White Down point Index       ♖  White Chess Rook         ✎   Btm Right Pencil
☠ Skull &amp; Crossbones         ♗  White Chess Bishop           ✏   Pencil
☡  Caution Sign            ♘  White Chess Knight         ✐   Top Right Pencil
☢    Radioactive Sign           ♙  White Chess Pawn           ✓  Check Mark
✔    Heavy Check Mark           ✬    Black Centre White Star        ❂  Circled Open Centre Eight point Star
✕  Multiplication X          ✭    Outlined Black Star         ❃  Heavy Teardrop Pinwheel Asterisk
✖  Heavy Multiplication X       ✮    Heavy Outlined Black Star      ❄  Snowflake
✗  Ballot X               ✯    Pinwheel Star             ❅  Tight Trifoliate Snowflake
✘  Heavy Ballot X            ✰    Shadowed White Star        ❆  Heavy Chevron Snowflake
✚  Heavy Greek Cross          ✱  Heavy Asterisk           ❇  Sparkle
✛  Open Centre Cross          ✲  Open Centre Asterisk        ❈  Heavy Sparkle
✜  Heavy Open Centre Cross       ✳  Eight Spoked Asterisk          ❉  Balloon Asterisk
✝   Latin Cross               ✴  Eight point Black Star        ❊  Eight Teardrop Asterisk
✞  Shadowed White Latin Cross       ✵  Eight point Pinwheel Star       ❋  Heavy Eight Teardrop Asterisk
✟   Outlined Latin Cross          ✶  Six point Black Star         ❍    Shadowed White Circle
✠  Maltese Cross            ✷  Eight point Rectilinear Black Star   ❏  Btm Right Shadowed White Square
✡  Star Of David           ✸  Heavy Eight point Black Star     ❐  Top Right Shadowed White Square
✢  Four Teardrop Asterisk         ✹  Twelve point Black Star        ❑  Btm Right Shadowed White Square
✣  Four Balloon Asterisk         ✺  Sixteen point Asterisk        ❒  Top Right Shadowed White Square
✤  Heavy Four Balloon Asterisk      ✻  Teardrop Asterisk            ❖  Black Diamond Minus White X
✥  Four Club Asterisk           ✼  Open Centre Teardrop Asterisk      
✦  Black Four point Star         ✽  Heavy Teardrop Asterisk         ❛   Heavy Single Turned Comma quote 
✧  White Four point Star         ✾  Six Petalled Black &amp; White Florette    ❜   Heavy Single Comma quote 
✩    Stress Outlined White Star        ✿  Black Florette             ❝  Heavy dbl Turned Comma quote 
✪  Circled White Star            ❀  White Florette             ❞  Heavy dbl Comma quote 
✫    Open Centre Black Star        ❁  Eight Petalled Black Florette     


██████████████ █ █ █ █  END   █ █ █ █ ██████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="65" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="66" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Special characters — Geometrical and ornamental characters</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="67" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="68" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="69" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

TITLE:    COMMON CHARACTER WIDTHS AND ADDITIONAL WHITESPACE CHARACTERS

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄



This section contains a list of the alphanumeric characters and common punctuation in terms of
character width (thinnest first).

The average character widths for each group are based on the frequency of letter usage in 
standard (British) English.

The additional whitespace characters complete the set of TIA Portal whitespace characters, these
are included for completeness, but duplicate the widths of the standard whitespace characters 
listed in previous sections.



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
NORMAL CHARACTERS BY WIDTH


▐I▌1sp
▐J▌1⅓ sp
▐T▌1⅔ SP
▐F▌2 sp
▐L▌2 sp
▐P▌2 sp
▐R▌2 sp
▐A▌2⅓ SP
▐B▌2⅓ SP
▐C▌2⅓ SP
▐E▌2⅓3 SP
▐K▌2⅓ SP
▐S▌2⅓ SP
▐V▌2⅓ SP
▐X▌2⅓ SP
▐Y▌2⅓ SP
▐Z▌2⅓ SP
▐D▌2⅔ sp
▐G▌2⅔ sp
▐H▌2⅔ sp
▐N▌2⅔ sp
▐U▌2⅔ sp
▐M▌3 sp
▐O▌3 sp
▐Q▌3 sp
▐W▌3 sp
Upper avg. (based on frequency and width) = 2.25 normal spaces

▐f▌1 sp
▐i▌1 sp
▐j▌1 sp
▐l▌1 sp
▐r▌1⅓ sp
▐t▌1⅓ sp
▐x▌1⅔ sp
▐y▌1⅔ sp
▐z▌1⅔ sp
▐c▌2 sp
▐k▌2 sp
▐s▌2 sp
▐v▌2 sp
▐a▌2⅓ sp
▐b▌2⅓ sp
▐d▌2⅓ sp
▐e▌2⅓ sp
▐g▌2⅓ sp
▐h▌2⅓ sp
▐n▌2⅓ sp
▐o▌2⅓ sp
▐p▌2⅓ sp
▐q▌2⅓ sp
▐u▌2⅓ sp
▐w▌3 sp
▐m▌3⅔ sp
Lower avg. (based on frequency and width) = 2.00 normal spaces

▐0▌2⅓ sp
▐1▌2⅓ sp
▐2▌2⅓ sp
▐3▌2⅓ sp
▐4▌2⅓ sp
▐5▌2⅓ sp
▐6▌2⅓ sp
▐7▌2⅓ sp
▐8▌2⅓ sp
▐9▌2⅓ sp
Numbers = 2.33 sp

▐!▌1 sp
▐'▌1 sp
▐,▌1 sp
▐-▌1 sp
▐.▌1 sp
▐/▌1 sp
▐\▌1 sp
▐|▌1 sp
▐[▌1⅓ sp
▐]▌1⅓ sp
▐:▌1⅓ sp
▐:▌1⅓ sp
▐(▌1⅓ sp
▐)▌1⅓ sp
▐{▌1⅔ sp
▐}▌1⅔ sp
▐"▌1⅔ sp
▐?▌1⅔ sp
▐&lt;▌2 sp
▐&gt;▌2 sp
▐^▌2 sp
▐_▌2 sp
▐~▌2 sp
▐=▌2⅓ sp
▐$▌2⅓ sp
▐*▌2⅓ sp
▐+▌2⅓ sp
▐`▌2⅓ sp
▐&amp;▌2⅔ sp
▐#▌2⅔ sp
▐%▌3 sp
▐@▌3⅓ sp
Punctuation avg. 1 sp (based on comma, full stop and dash being the most common)



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ALL OTHER WHITESPACE CHARACTERS

The other whitespace characters (Hair space, figure space &amp;c.) are supported by the Siemens
font, but have the identical widths to those listed above. The full list is shown below:

▐        ▌8 Normal spaces
▐  ▌2 Em spaces
▐    ▌4 En space      (1/2 em - 2 spaces)
▐      ▌6 Three per em     (1/3 em - 1⅓ space)
▐        ▌8 Punctuation space (1/4 em - 1 space)
▐        ▌8 Normal space      (1/4 em - 1 space)
▐        ▌8 Four per em      (1/4 em - 1 space)
▐        ▌8 Figure space     (1/4 em - 1 space)
▐            ▌12 Six per em    (1/6 em - ⅔ space)
▐            ▌12 Hair space       (1/6 em - ⅔ space)

                ━━━  ⬙⬙⬙⬙⬙⬙  ━━━


██████████████ █ █ █ █  END   █ █ █ █ ██████████████
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="6A" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="6B" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Special characters — Common character widths and additional whitespace characters</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="6C" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="6D" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="6E" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
The system block RD_SYS_T reads the time of day, the date and the day of week from the system 
real time clock as a DTL (or Date_And_Time_Long) data type (one just being the shorthand 
notation of the other). The result is stored in a local variable for decoding.

The DTL data type stores the date and time information in 8 consecutive bytes in BCD format 
as follows:


 ――――――――――――――――――――――――――――――――――――――――――
 DATA         DESCRIPTION

 0          Dear        (00h-89h = 2000 to 2089)   (90h-99h = 1990 to 1999)
 1          Month      (00h-12h = Jan to Dec)
 2          Day       (01h-31h)
 3          Hour        (00h-23h)
 4          Minute        (00h-59h)
 5          Month      (00h-12h = Jan to Dec)
 6-7         Millisecond      Uses byte 6 and most significant 4 bits of byte 7)
 7          Day of Week    least significant 4 bits (1h-7h = Sun to Sat)
 ――――――――――――――――――――――――――――――――――――――――――


The local variable is of type DTL (Date_And_Time_Long), this is compatible with the DT output
from RD_SYST, but allows the individual elements of the DT structure to be accesses
individually as symbols.

Note:    The DTL format can store more information (it can for example handle years in the 
     range 1970 to 2262; however, it will still only store the data in the table above
     when used with RS_SYS_T. 
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="6F" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="70" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>Load the system RTC and store in local variable  [typical network comment]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="71" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="72" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="73" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

 ███   ███   ███  █  █   ███  
█   █ █   █ █   █ █  █  █   █ 
█  ██     █     █ █  █  █  ██ 
█ █ █  ███   ███  █████ █ █ █ 
██  █     █     █    █  ██  █ 
█   █ █   █ █   █    █  █   █ 
 ███   ███   ███     █   ███  

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
STEP DESCRIPTION


Open the dry air purge valve (SV4201), activate the operator prompt ABORT PURGE.

If the main chamber humidity level falls below the target value proceed to the next step.

If the operator presses the ABORT PURGE button proceed to step 03400.



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
STEP PHASE AND DELAY CONDITIONS


 ――――――――――――――――――――――――――――――――――――――――――
 PHASE         ACTION
 ――――――――――――――――――――――――――――――――――――――――――
 INITIALISING      Activate the ABORT PURGE enable signal

 PROCESSING    Open SV4201

 TERMINATING    Clear the ABORT PURGE enable signal and any ABORT PURGE pressed
          signal

 STEP DELAY      No delay
 ――――――――――――――――――――――――――――――――――――――――――



▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
STEP TRANSITION CONDITIONS


 ――――――――――――――――――――――――――――――――――――――――――
 TRANSITION      TO STEP    TRANSITION CONDITIONS
 ――――――――――――――――――――――――――――――――――――――――――
 1.        03350      HIC001 ≤ HUMIDITY_LIMIT

 2.        03400      Operator has pressed ABORT PURGE button
 ――――――――――――――――――――――――――――――――――――――――――


▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="74" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="75" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>██ STEP 03340 — DECLARATION (RUNNING) [sequence network comment]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="76" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="77" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="78" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
INITIALISE PHASE

Activate the ABORT PURGE enable signal
(this is a temporary signal passed to the handling DB at the end of the block)
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="79" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="7A" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>   STEP 03340 — ACTION (INITIALISE) [sequence network comment]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="7B" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource />
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="7C" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="7D" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
TRANSITION CONDITION 01

Wait for humidity to reach target level HIC001 ≤ HUMIDITY_LIMIT
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="7E" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="7F" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>   STEP 03340 — TRANSITION 01 [sequence network comment]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <SW.Blocks.CompileUnit ID="80" CompositionName="CompileUnits">
        <AttributeList>
          <NetworkSource><FlgNet xmlns="http://www.siemens.com/automation/Openness/SW/NetworkSource/FlgNet/v4">
  <Parts>
    <Access Scope="LocalVariable" UId="21">
      <Symbol>
        <Component Name="SYS_SIGNALS" />
        <Component Name="_False" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="22">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'MIT LICENSE'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="23">
      <Symbol>
        <Component Name="licInfo" />
        <Component Name="LICENCE_TYPE" />
      </Symbol>
    </Access>
    <Access Scope="LiteralConstant" UId="24">
      <Constant>
        <ConstantType>String</ConstantType>
        <ConstantValue>'2020 Michael Gledhill'</ConstantValue>
      </Constant>
    </Access>
    <Access Scope="LocalVariable" UId="25">
      <Symbol>
        <Component Name="licInfo" />
        <Component Name="COPYRIGHT" />
      </Symbol>
    </Access>
    <Part Name="Contact" UId="26">
      <Negated Name="operand" />
    </Part>
    <Part Name="S_Move" UId="27" DisabledENO="true" />
    <Part Name="S_Move" UId="28" DisabledENO="true" />
  </Parts>
  <Wires>
    <Wire UId="29">
      <Powerrail />
      <NameCon UId="26" Name="in" />
    </Wire>
    <Wire UId="30">
      <IdentCon UId="21" />
      <NameCon UId="26" Name="operand" />
    </Wire>
    <Wire UId="31">
      <NameCon UId="26" Name="out" />
      <NameCon UId="27" Name="en" />
      <NameCon UId="28" Name="en" />
    </Wire>
    <Wire UId="32">
      <IdentCon UId="22" />
      <NameCon UId="27" Name="in" />
    </Wire>
    <Wire UId="33">
      <NameCon UId="27" Name="out" />
      <IdentCon UId="23" />
    </Wire>
    <Wire UId="34">
      <IdentCon UId="24" />
      <NameCon UId="28" Name="in" />
    </Wire>
    <Wire UId="35">
      <NameCon UId="28" Name="out" />
      <IdentCon UId="25" />
    </Wire>
  </Wires>
</FlgNet></NetworkSource>
          <ProgrammingLanguage>LAD</ProgrammingLanguage>
        </AttributeList>
        <ObjectList>
          <MultilingualText ID="81" CompositionName="Comment">
            <ObjectList>
              <MultilingualTextItem ID="82" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
LICENCE AND CONTACT INFORMATION

This software and its associated documentation is made available under the MIT Licence:

════════════════════════════════════════════

The MIT License (MIT)

Copyright © 2020 Michael Gledhill

Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
and associated documentation files (the “Software”), to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, merge, publish, distribute, 
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is 
furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included in all copies or 
substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

════════════════════════════════════════════
                   ┌────────────┐
You can reach the author by email here:   │  mg@practicalseries.com  │
                   └────────────┘
Questions, corrections, constructive criticism and complaints (polite ones) are invited.

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
          <MultilingualText ID="83" CompositionName="Title">
            <ObjectList>
              <MultilingualTextItem ID="84" CompositionName="Items">
                <AttributeList>
                  <Culture>en-US</Culture>
                  <Text>LICENCE AND CONTACT INFORMATION [final network]</Text>
                </AttributeList>
              </MultilingualTextItem>
            </ObjectList>
          </MultilingualText>
        </ObjectList>
      </SW.Blocks.CompileUnit>
      <MultilingualText ID="85" CompositionName="Title">
        <ObjectList>
          <MultilingualTextItem ID="86" CompositionName="Items">
            <AttributeList>
              <Culture>en-US</Culture>
              <Text>Documentation Module [GENERAL] — Example Documentation</Text>
            </AttributeList>
          </MultilingualTextItem>
        </ObjectList>
      </MultilingualText>
    </ObjectList>
  </SW.Blocks.FC>
</Document>